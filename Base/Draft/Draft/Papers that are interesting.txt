


Why Qubes doesn’t work on Windows.
http://www.invisiblethingslab.com/resources/2014/A%20crack%20on%20the%20glass.pdf



http://pdos.csail.mit.edu/~xi/papers/stack-sosp13.pdf


Reflections on Trusting Trust 
https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf

A Practical Attack to De-Anonymize Social Network Users
https://www.iseclab.org/papers/sonda-TR.pdf


Virtual Ghost:
Protecting Applications from Hostile Operating Systems
http://sva.cs.illinois.edu/pubs/VirtualGhost-ASPLOS-2014.pdf

https://cseweb.ucsd.edu/~hovav/dist/geometry.pdf
Abstract
We present new techniques that allow a return-into-libc attack to be mounted on
x86 executables that calls no functions at all. Our attack combines a large number of short instruction sequences to build gadgets that allow arbitrary computation. We show how to discover such instruction sequences by means of static analysis. We make use, in an essential way, of the
properties of the x86 instruction set.


Ceremony Design and Analysis 
http://eprint.iacr.org/2007/399.pdf
Abstract:
The concept of Ceremony is introduced as an extension of the concept of network protocol, with human nodes alongside computer nodes and with communication links that include UI, human-to-human communication and transfers of physical objects that carry data. What is out-of-band to a protocol is in-band to a ceremony, and therefore subject to design and analysis using variants of the same mature techniques used for the design and analysis of protocols. Ceremonies include all protocols, as well as all applications with a user interface, all workflow and all provisioning scenarios. A secure ceremony is secure against both normal attacks and social engineering. However, some secure protocols imply ceremonies that cannot be made secure. 



It’s all about the timing. . .
https://www.blackhat.com/presentations/bh-usa-07/Meer_and_Slaviero/Whitepaper/bh-usa-07-meer_and_slaviero-WP.pdf

This paper is broken up into several distinct parts, all
related loosely to timing and its role in information se-
curity today. While timing has long been recognized
as an important component in the crypt-analysts arse-
nal, it has not featured very prominently in the domain
of Application Security Testing. This paper aims at
highlighting some of the areas in which timing can be
used with great effect, where traditional avenues fail. In
this paper, a brief overview of previous timing attacks
is provided, the use of timing as a covert channel is
examined and the effectiveness of careful timing during
traditional web application and SQL injection attacks is
demonstrated. The use of Cross Site Timing in bypass-
ing the Same Origin policy is explored as we believe
the technique has interesting possibilities for turning
innocent browsers into bot-nets aimed at, for instance,
brute-force attacks against third party web-sites



Virtual Ghost
	Link: http://sva.cs.illinois.edu/pubs/VirtualGhost-ASPLOS-2014.pdf


	Abstract: 
Applications that process sensitive data can be carefully designed and validated to be difficult to attack, but they are usually run on monolithic, commodity operating systems, which may be less secure. An OS compromise gives the attacker complete access to all of an application’s data, regardless of how well the application is built. We propose a new system, Virtual Ghost, that protects applications from a compromised or even hostile OS. 

Virtual Ghost is the first system to do so by combining compiler instrumentation and run-time checks on operating system code, which it uses to create ghost memory that the operating system cannot read or write. Virtual Ghost interposes a thin hardware abstraction layer between the kernel and the hardware that provides a set of operations that the kernel must use to manipulate hardware, and provides a few trusted services for secure applications such as ghost memory management, encryption and signing services, and key management.

 Unlike previous solutions, Virtual Ghost does not use a higher privilege level than the kernel. Virtual Ghost performs well compared to previous approaches; it outperforms InkTag on five out of seven of the LMBench microbenchmarks with improvements between 1.3x and 14.3x. For network downloads, Virtual Ghost experiences a 45% reduction in bandwidth at most for small files and nearly no reduction in bandwidth for large files and web traffic. An application we modified to use ghost memory shows a maximum additional overhead of 5% due to the Virtual Ghost protections. We also demonstrate Virtual Ghost’s efficacy by showing how it defeats sophisticated rootkit attacks



























