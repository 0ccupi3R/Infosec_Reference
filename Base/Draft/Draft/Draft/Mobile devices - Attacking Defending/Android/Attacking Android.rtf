{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Courier New;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;}
{\*\listtable
{\list\listtemplateid1\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f0\fs24\b0\i0\fi-360\li720\lin720}
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F;}{\levelnumbers;}\f0\fs24\b0\i0\fi-360\li1440\lin1440}
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F;}{\levelnumbers;}\f0\fs24\b0\i0\fi-360\li2160\lin2160}{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f0\fs24\b0\i0\fi-360\li720\lin720}{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b1\i0\ul\ulc0 Attacking Android Devices}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 List of Android Vulnerabilities}
\par\plain {\f0\fs24\b0\i0 http://androidvulnerabilities.org/all}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 List of Android Exploits:}
\par\plain {\f0\fs24\b0\i0 https://github.com/droidsec/droidsec.github.io/wiki/Vuln-Exploit-List}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 Books}
\par\plain {\f0\fs24\b0\i0 Android hackers handbook}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0\ul\ulc0 Security Analysis}
\par\plain \f0\fs24\b1\i0
\par\plain {\f0\fs24\b1\i0 Santoku Linux}
\par\plain \f0\fs24\b1\i0
\par\plain \f0\fs24\b1\i0
\par\plain {\f0\fs24\b1\i0 Android Tamer}
\par\pard\plain \fi720\ltrch\loch {\f0\fs24\b0\i0 http://androidtamer.com/}
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 Android Tamer is a one stop tool required to perform any kind of operations on Android devices / applications / network}
\par\plain {\f0\fs24\b0\i0 VM}
\par\plain \f0\fs24\b1\i0
\par\plain {\f0\fs24\b1\i0 Android Device Testing Framework(DTF)}
\par\plain {\f0\fs24\b0\i0 From: https://github.com/jakev/dtf/tree/v1.0.3}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 The Android Device Testing Framework ("dtf") is a data collection and analysis framework to help individuals answer the question: "Where are the vulnerabilities on this mobile device?" Dtf provides a modular approach and built-in APIs that allows testers to quickly create scripts to interact with their Android devices. The default download of dtf comes with multiple modules that allow testers to obtain information from their Android device, process this information into databases, and then start searching for vulnerabilities (all without requiring root privileges). These modules help you focus on changes made to AOSP components such as applications, frameworks, system services, as well as lower-level components such as binaries, libraries, and device drivers. In addition, you'll be able to analyze new functionality implemented by the OEMs and other parties to find vulnerabilities.}
\par\plain \f0\fs24\b1\i0
\par\plain {\f0\fs24\b1\i0 drozer}
\par\plain {\f0\fs24\b0\i0 From their site}{\f0\fs24\b0\i0 : }
\par\plain {\f0\fs24\b0\i0 drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.}
\par\plain {\f0\fs24\b0\i0 https://github.com/mwrlabs/drozer}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0\ul\ulc0 Application Analysis}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b1\i0 Androguard}
\par\plain {\f0\fs24\b0\i0 From their site:}
\par\plain {\f0\fs24\b0\i0 Androguard is mainly a tool written in python to play with: }
\par\pard\plain \li1440\fi-360\sb240\ltrch\loch \ls1\ilvl1{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F\tab }{\f0\fs24\b0\i0 Dex/Odex (}{\field{\*\fldinst HYPERLINK "https://sites.google.com/site/io/dalvik-vm-internals"}{\fldrslt\f0\fs24\b0\i0\ul\ulc0\cf3 Dalvik}}{\f0\fs24\b0\i0  virtual machine) (.dex) (disassemble, decompilation), }
\par\pard\plain \li1440\fi-360\ltrch\loch \ls1\ilvl1{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F\tab }{\f0\fs24\b0\i0 APK (Android }{\field{\*\fldinst HYPERLINK "https://play.google.com/"}{\fldrslt\f0\fs24\b0\i0\ul\ulc0\cf3 application}}{\f0\fs24\b0\i0 ) (.apk), }
\par\plain \ilvl1{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F\tab }{\f0\fs24\b0\i0 Android's binary xml (.xml), }
\par\plain \ilvl1{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F\tab }{\f0\fs24\b0\i0 Android Resources (.arsc). }
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 Androguard is available for Linux/OSX/Windows (python powered).}
\par\plain {\f0\fs24\b0\i0 https://code.google.com/p/androguard }
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b1\i0 Droidmap\tab }
\par\plain {\f0\fs24\b0\i0 From their site:}
\par\plain {\f0\fs24\b0\i0 DroidBox is developed to offer dynamic analysis of Android applications. The following information is shown in the results, generated when analysis is ended: }
\par\pard\plain \li720\fi-360\sb240\ltrch\loch \ls2\ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Hashes for the analyzed package }
\par\pard\plain \li720\fi-360\ltrch\loch \ls2\ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Incoming/outgoing network data }
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 File read and write operations }
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Started services and loaded classes through DexClassLoader }
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Information leaks via the network, file and SMS }
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Circumvented permissions }
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Cryptography operations performed using Android API }
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Listing broadcast receivers }
\par\pard\plain \li720\fi-360\sa240\ltrch\loch \ls2\ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Sent SMS and phone calls }
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24\b0\i0 Additionally, two images are generated visualizing the behavior of the package. One showing the temporal order of the operations and the other one being a treemap that can be used to check similarity between analyzed packages. }
\par\pard\plain \ltrch\loch {\f0\fs24\b1\i0 \tab \tab https://code.google.com/p/droidbox/}
\par\plain {\f0\fs24\b0\i0 \tab }
\par\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 Links:}
\par\plain {\f0\fs24\b0\i0 Security enhancements in android through its versions}
\par\plain {\f0\fs24\b0\i0 \tab www.androidtamer.com}
\par\pard\plain \ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0\ul\ulc0 Attack Platforms}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 drozer}
\par\plain {\f0\fs24\b0\i0 From their site: }
\par\plain {\f0\fs24\b0\i0 drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.}
\par\plain {\f0\fs24\b0\i0 https://github.com/mwrlabs/drozer}
\par\pard\plain \li720\fi-360\sb240\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch \f0\fs24\b1\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 Notes:}
\par\plain {\f0\fs24\b0 \line \line Defeating the bootloader\line (HTC Devices)\line -secuflag - security flag in radio firmware - modify radio\line \line -gold card - specially formatted MicroSD card that can bypass carrier id check when flashing roms\line \line -white card - special sim card used to bypass bootsec\line \~\~\~\~ Emulate white card with hardware, combine with gold card to enter diagnostics and clear S-ON\line \line \line White card not needd for cdma\line \line Once S-OFF, can RAM load a custom boot iamge\line \line Technique wipes most devices, but not all\line \line Try it yourself: XTC clip\line \line \line Forensics boot image\line \line -Start early in the boot chain before the main system loads\line -Provide ADB root shell over USB\line -Do not mount anything, including cache to prevent any writes\line -Devices with raw NAND flash and wear leveling implemented in software(YAFFS2) can be prevented from overwriting deleted data\line \line Build boot image\line \line upload adbd, busybox, nanddump to /sbin\line default.prop (enable root shell, ro.secure=0)\line init.rc (do not mount partitions, just start adb)\line \line Flash and RAM load\line \line Samsung\line -Dump partitions using ODIN(maybe. probably not)\line -Flash with ODIN or HEIMDALL\line \~\~\~\~ heimdall flash --recovery recovery.bin\line \~\~\~\~ heimdall flash --kernel zImage\line HTC\line -fastboot boot recovery.img (Ram loading)\line -fastboot flash recovery recovery.img (flash partition)\line \line Motorola\line -sbf_flash image name.sbf (make sure it only contains recovery)\line \line JTAG\line -Flasher Box\line \~\~\~\~ -ORT\line \~\~\~\~ -RiffBox\line \~\~\~\~ -Medusa Box\line -Allows you to dump nandflash directly\line \line \line Some devices have debug access via serial cables\line -Use a Bus Pirate and MicroUSB breakout board\line \~\~\~\~ -set bus pirate to 115200 bps, 8-N-1\line \~\~\~\~ -Output type is normal, not open drain\line \~\~\~\~ -Plug in device to MicroUSB and you will see it boot the Primitive Boot Loader followed by the Secondary Boot Loader\line \~\~\~\~ -Hold down enter key on terminal while plugging in device to stop SBL from booting and get to the SBL prompt\line \line Crack Pin/Password\line -Salt - stored in /data/data/com.android.providers.settings/databases/settings.db\line \line \~\~\~\~ -SELECT * FROM secure WHERE name = 'lockscreen.password_salt'\line \line -Pin/Password\line \~\~\~\~ -/data/system/password.key\line \~\~\~\~ -Salted SHA1 of password concatenated with salted MD5\line \line -Calculate the value of the salt in lowercase hex with no padding\line $python -c 'print '%x' % salt_number_here'\line \line -Copy the last 32 bytes of password.key(MD5 hash in hex), add a colon and then add the salt\line \line -Crack with software such as oclHashcat\line \line Android Encryption:\line Implemented differently by manufacturers\line \line -Encrypted Master key + salt stored in footer\line -footer stored at end of partition or in a footer file on another partition or as a partition itself\line -Image device and locate footer + encrypted user data partition\line \line -Parse footer\line -Locate Salt/master key\line -Run a password guess through PBKDF2 with salt, use resulting key and IV to decrypt master key to decrypt first sector of encrypted image, if password is correct, plaintext revealed\line \line -Cracking PINs takes seconds. Passwords are usually short or follow patterns due to being the same as the lock screen password\line \line Evil maid attack\line -Load app onto system partition, wait for user to boot phone, get remote access to decrypted user data\line -Rootkits - compile kernel module\line -Evil usb charger\line \line \line Desperate Techniques\line -Hard reset - some devices prior to 3.0 don't wipe data properly\line -Chip-off - de-solder NAND chips\line -Screen Smudges\line \line More Techniques\line -Custom update.zip - can you get one signed? stock needs sig\line -Race condition on updates via SD cards\line -Own a CA? MITM connetion, push app, update/exploit\line -Entry via Google Play, if credentials cached on desktop\line \~\~\~\~ -Screen Lock bypass - Doesn't work on 4.0 ->\line \line Santoku Linux\line -Free/open bootable linux distro\line -project is collab with pros\line -Mobile Forensics\line -Mobile App Sec Testing\line -Mobile Malware Analysis\line \line \line \line \line }
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0}