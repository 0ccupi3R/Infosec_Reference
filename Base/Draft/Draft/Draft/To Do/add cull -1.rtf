{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Courier New;}{\f1\fmodern\fcharset0\fprq2 Segoe Print;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;}
{\*\listtable
{\list\listtemplateid1\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f0\fs24\fi-360\li720\lin720}{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain {\f0\fs24 Client Identification Mechanisms}
\par\plain {\f0\fs24 http://www.chromium.org/Home/chromium-security/client-identification-mechanisms}
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain {\f0\fs24 http://c7zero.info/}
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain {\f0\fs24 Look into}
\par\plain {\f0\fs24 http://cybergibbons.com/uncategorized/an-intriguing-mix-of-micros/}
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain {\f0\fs24 https://github.com/droidsec/droidsec.github.io/wiki/Android-Crackmes}
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain {\f0\fs24 Lookat http://www.cl.cam.ac.uk/~sps32/PartII_030214.pdf}
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain {\f0\fs24 Check under research section}
\par\plain {\f0\fs24 http://www.cl.cam.ac.uk/~sps32/}
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain {\f0\fs24 http://moonbaseotago.com/onerng/theory.html}
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain {\f0\fs24 KillerBee Framework}
\par\plain {\f0\fs24 https://code.google.com/p/killerbee/}
\par\plain {\f0\fs24 KillerBee is a Python based framework and tool set for exploring and exploiting the security of ZigBee and IEEE 802.15.4 networks. Using KillerBee tools and a compatible IEEE 802.15.4 radio interface, you can eavesdrop on ZigBee networks, replay traffic, attack cryptosystems and much more. Using the KillerBee framework, you can build your own tools, implement ZigBee fuzzing, emulate and attack end-devices, routers and coordinators and much more. }
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain {\f0\fs24 https://cseweb.ucsd.edu/~hovav/dist/geometry.pdf}
\par\plain {\f0\fs24 Abstract}
\par\plain {\f0\fs24 We present new techniques that allow a return-into-libc attack to be mounted on}
\par\plain {\f0\fs24 x86 executables that calls no functions at all. Our attack combines a large number of short instruction sequences to build gadgets that allow arbitrary computation. We show how to discover such instruction sequences by means of static analysis. We make use, in an essential way, of the}
\par\plain {\f0\fs24 properties of the x86 instruction set.}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 Hardware level trojans http://sharps.org/wp-content/uploads/BECKER-CHES.pdf}
\par\pard\plain \ltrch\loch {\f0\fs24 Stealthy Dopant-Level Hardware Trojans}
\par\plain {\f0\fs24 In this paper we propose an extremely stealthy approach for implement-}
\par\plain {\f0\fs24 ing hardware Trojans below the gate level, and we evaluate their impact}
\par\plain {\f0\fs24 on the security of the target device. Instead of adding additional cir-}
\par\plain {\f0\fs24 cuitry to the target design, we insert our hardware Trojans by changing}
\par\plain {\f0\fs24 the dopant polarity of existing transistors. Since the modi ed circuit ap-}
\par\plain {\f0\fs24 pears legitimate on all wiring layers (including all metal and polysilicon),}
\par\plain {\f0\fs24 our family of Trojans is resistant to most detection techniques, includ-}
\par\plain {\f0\fs24 ing ne-grain optical inspection and checking against \\golden chips".}
\par\plain {\f0\fs24 We demonstrate the e ectiveness of our approach by inserting Trojans}
\par\plain {\f0\fs24 into two designs | a digital post-processing derived from Intel's cryp-}
\par\plain {\f0\fs24 tographically secure RNG design used in the Ivy Bridge processors and}
\par\plain {\f0\fs24 a side-channel resistant SBox implementation | and by exploring their}
\par\plain {\f0\fs24 detectability and their e ects on security.}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 Access control best pactices}
\par\plain {\f1\fs22 https://srlabs.de/acs/}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 AV Evasion; One Packer to Rule them all - Empirical identification comparison and circumvention of current AV detection techniques}
\par\plain {\f1\fs22 http://www.arneswinnen.net/wp-content/uploads/2014/08/WP-us-14-Mesbahi-Swinnen-One-packer-to-rule-them-all-Empirical-identification-comparison-and-circumvention-of-current-Antivirus-detection-techniques.pdf}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\pard\plain \ltrch\loch {\f0\fs36\b0 Demystifying the mobile network - Chuck McAuley;}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch {\f1\fs24 http://2014.video.sector.ca/video/110383258}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain {\f1\fs22 Go through}
\par\plain {\f1\fs22 https://santoku-linux.com/howtos}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 Hacking windows through the WIndows API; delves into windows api, how it can break itself}
\par\plain {\f1\fs22 http://www.irongeek.com/i.php?page=videos/derbycon4/t122-getting-windows-to-play-with-itself-a-pen-testers-guide-to-windows-api-abuse-brady-bloxham}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 Bluetooth IOCTL priv esc mac osx}
\par\plain {\f1\fs22 http://randomthoughts.greyhats.it/2014/10/osx-local-privilege-escalation.html}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 Breaking apple touchID cheaply}
\par\plain {\f1\fs22 http://www.ccc.de/en/updates/2013/ccc-breaks-apple-touchid}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 Malware analysis}
\par\pard\plain \sa240\sb320\ltrch\loch {\f0\fs36\b1 Unmasking Careto through Memory Analysis - Andrew Case}
\par\plain {\f0\fs36\b1 http://2014.video.sector.ca/video/110388398\tab }
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 Reversef engineering walk htrouhg; guy rev eng alarm system from shelf to replay}
\par\plain {\f1\fs22 https://www.reddit.com/r/ReverseEngineering/comments/1hb7oy/a_series_about_basics_of_hardware_reverse/}
\par\plain {\f1\fs22 Part 1: http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-system-part-1/}
\par\plain {\f1\fs22 Part 2: http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-2/}
\par\plain {\f1\fs22 Part 3: http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-3/}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch {\f1\fs22\b0\i0 Part 4: http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-4/}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch {\f1\fs22\b0\i0 Part 5: http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-5/}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch {\f1\fs22\b0\i0 Part 6: http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-6/}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch {\f1\fs22\b0\i0 Part 7: http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-7/}
\par\plain {\f1\fs22\b0\i0 Part 8: http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-8/}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain {\f1\fs22 Hardware reveng tool}
\par\plain {\f1\fs22 https://www.saleae.com/logic}
\par\plain \f1\fs22
\par\plain {\f1\fs22 Darknets intro vid - educational}
\par\plain {\f1\fs22 https://www.youtube.com/watch?v=tjJYC2LuJl0}
\par\plain \f1\fs22
\par\plain {\f1\fs22 http://winmerge.org/}
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24 WinMerge is an }{\field{\*\fldinst HYPERLINK "http://winmerge.org/about/license.php"}{\fldrslt\f0\fs24\ul\ulc0\cf3 Open Source}}{\f0\fs24  differencing and merging tool for Windows. WinMerge can compare both folders and files, presenting differences in a visual text format that is easy to understand and handle.}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain {\f1\fs22 http://windowsir.blogspot.com/2013/11/sniper-forensics-memory-analysis-and.html}
\par\plain {\f1\fs22 http://blog.spiderlabs.com/2011/11/sniper-forensics-context-context-context.html}
\par\plain {\f1\fs22 http://blog.spiderlabs.com/2011/03/sniper-forensics-part-4.html}
\par\plain {\f1\fs22 https://digital-forensics.sans.org/summit-archives/2010/2-newell-spiderlabs-sniper-forensics.pdf}
\par\plain {\f1\fs22 http://blog.spiderlabs.com/2011/07/sniper-forensics-part-v-finding-evil-part-ii.html\tab http://blog.spiderlabs.com/2011/01/sniper-forensics-part-two-target-acquisition-in-part-one-of-the-sniper-forensics-post-we-discussed-the-history-of-forensic.html\tab \tab }
\par\plain \f1\fs22
\par\plain {\f1\fs22 http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/14-hacking-the-wireless-world-with-software-defined-radio-2-0-balint-seeber}
\par\pard\plain \sa240\sb280\ltrch\loch {\f0\fs28\b1 Execute ShellCode Using Python }
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch {\f0\fs24\b0 From the site: }{\f1\fs22\b0\i0 http://www.debasish.in/2012/04/execute-shellcode-using-python.html}
\par\pard\plain \ltrch\loch {\f0\fs24  In this article I am going to show you, how can we use python and its "ctypes" library to execute a "calc.exe" shell code or any other shell code.}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/17-phys-macs-and-sdrs-robert-ghilduta}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 https://digital-forensics.sans.org/summit-archives/2010/2-newell-spiderlabs-sniper-forensics.pdf}
\par\plain {\f1\fs22 Pg10 and onward}
\par\plain \f1\fs22
\par\plain {\f1\fs22 http://www.wildcroftsecurity.com/echo-mirage}
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24\b1 Echo Mirage}{\f0\fs24  is a generic network proxy. It uses DLL injection and function hooking techniques to redirect network related function calls so that data transmitted and received by local applications can be }{\f0\fs24\b1 observed}{\f0\fs24  and }{\f0\fs24\b1 modified}{\f0\fs24 . }
\par\plain {\f0\fs24 Windows encryption and OpenSSL functions are also hooked so that plain text of data being sent and received over an encrypted session is also available. }
\par\plain {\f0\fs24 Traffic can be intercepted in real-time, or manipulated with regular expressions and a number of action directives}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 https://code.google.com/p/alpha3/}
\par\pard\plain \ltrch\loch {\f0\fs24 ALPHA3 is a tool for transforming any x86 machine code into 100% alphanumeric code with similar functionality. It works by encoding the original code into alphanumeric data and combining this data with a decoder, which is a piece of x86 machine code written specifically to be 100% alphanumeric. When run, the decoder converts the data back to the original code, after which it is executed. }
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 https://www.youtube.com/watch?v=eI4ceLgO_CE}
\par\plain {\f1\fs22 Techniques for fast windows investigations, look at sniper forensics, skip around, 18min has resources you want to grab for snapshots}
\par\plain \f1\fs22
\par\plain {\f1\fs22 Compare resources against what power-view can grab}
\par\plain {\f1\fs22 Compare against sysmon service for scaling, setting it as service with scripting}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 Attacking *multifunction* printers and getting creds fom them;\line www.irongeek.com/i.php?page=videos/bsidescleveland2014/plunder-pillage-and-print-the-art-of-leverage-multifunction-printers-during-penetration-testing-deral-heiland}
\par\pard\plain \li720\fi-360\sa240\ltrch\loch \f1\fs22
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain {\f1\fs22 Arachni Web Scanner}
\par\plain {\f1\fs22 http://www.arachni-scanner.com/}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 Finding Opcodes}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch {\f1\fs22 Methods of finding opcodes:}
\par\plain {\f1\fs22 metasploit opcode DB}
\par\plain \f1\fs22
\par\plain {\f1\fs22 memdump}
\par\plain {\f1\fs22 pvefindaddr - mona.py}
\par\plain \f1\fs22
\par\plain {\f1\fs22 http://www.securiteam.com/tools/5LP0C1PEUY.html}
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch \f1\fs22
\par\plain \f1\fs22
\par\plain {\f1\fs22 http://simplemachines.it/doc/arm_inst.pdf}
\par\plain {\f1\fs22 Arm instrution set}
\par\plain \f1\fs22
\par\plain \f1\fs22
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch {\f1\fs22 http://eshunrd.blogspot.com/2011/09/linux-kernel-26362-econet-privilege.html}
\par\plain \f1\fs22
\par\pard\plain \tx384\tx768\tx1152\tx1536\tx1920\tx2304\tx2688\tx3072\tx3456\tx3840\tx4224\tx4608\tx4992\tx5376\tx5760\tx6144\tx6528\tx6912\tx7296\tx7680\tx8064\tx8448\tx8832\tx9216\tx9600\tx9984\tx10368\tx10752\tx11136\tx11520\tx11904\tx12288\ltrch\loch {\f1\fs22 http://theinvisiblethings.blogspot.com/2011/09/anti-evil-maid.html?m=1}
\par\plain \f1\fs22
\par\plain {\f1\fs22 https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/singles/windows}
\par\pard\plain \ltrch\loch \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://theinvisiblethings.blogspot.com/2009/10/evil-maid-goes-after-truecrypt.html}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://www.hping.org/}
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24 hping is a command-line oriented TCP/IP packet assembler/analyzer. The interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features. }
\par\pard\plain \ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 https://github.com/pradeep1288/ffpasscracker}
\par\plain {\f0\fs24\b0\i0 Firefox password cracker}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 https://github.com/emperorcow/ravenhid}
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24 Hardware and software to run a RFID reader to harvest card information. This is the PCB design and Arduino code that will run a RFID reader, allowing you to gather and harvest cards. Typically, a larger reader, such as those in garages, will be more successful, allowing you to ready over a couple feet instead of inches. The board itself is designed to be modular and support multiple methods to output harvested cards once they are read: }
\par\pard\plain \li720\fi-360\sb240\ltrch\loch \ls1\ilvl0{\listtext\f0\fs24 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24 Text file on a MicroSD card}
\par\pard\plain \li720\fi-360\ltrch\loch \ls1\ilvl0{\listtext\f0\fs24 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24 Print out to LCD}
\par\pard\plain \li720\fi-360\sa240\ltrch\loch \ls1\ilvl0{\listtext\f0\fs24 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24 Bluetooth Low Energy Arduino serial connection }
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24 Each of these options are supported in code, but can be ignored on the PCB. The PCB itself has been designed to use a pluggable module for each of these options, making it easy to ignore, install, or change out which ones you find useful. }
\par\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24 https://github.com/mubix/netview}
\par\plain {\f0\fs24 Netview is a enumeration tool. It uses (with the -d) the current domain or a specified domain (with the -d domain) to enumerate hosts}
\par\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://ciat.sourceforge.net/}
\par\pard\plain \ltrch\loch {\f0\fs24 The Cryptographic Implementations Analysis Toolkit (CIAT) is compendium of command line and graphical tools whose aim is to help in the detection and analysis of encrypted byte sequences within files (executable and non-executable). }
\par\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Shellshock bug writeup by lcamtuf}
\par\plain {\f0\fs24\b0\i0 http://lcamtuf.blogspot.com/2014/10/bash-bug-how-we-finally-cracked.html}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 https://github.com/Veil-Framework/Veil-PowerView}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 https://addons.mozilla.org/en-US/firefox/addon/ssleuth/}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://www.appliednsm.com/introducing-flowbat/}
\par\plain {\f0\fs24\b0\i0 Awesome flow tool, SiLK backend}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://cowl.ws/}
\par\pard\plain \sa240\sb280\ltrch\loch {\f0\fs28\b1 COWL: A Confinement System for the Web}
\par\pard\plain \ltrch\loch {\f0\fs24 robust JavaScript confinement system for modern web browsers. COWL introduces label-based }{\field{\*\fldinst HYPERLINK "https://en.wikipedia.org/wiki/Mandatory_access_control"}{\fldrslt\f0\fs24\ul\ulc0\cf3 mandatory access control}}{\f0\fs24  to browsing contexts (pages, iframes, etc.) in a way that is fully backward-compatible with legacy web content. }
\par\plain {\f0\fs24 http://www.scs.stanford.edu/~deian/pubs/stefan:2014:protecting.pdf}
\par\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Prompt.ml - XSS challenges}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Cryptopals.com - Matsano Crypto Challenges}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Yelp/Github - OSX Collector - Mass stle forensics/management}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 https://github.com/ctfs/write-ups}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://www.getmantra.com/hackery/}
\par\plain {\f0\fs24\b0\i0 http://www.getmantra.com/galley/}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://www.petges.lu/home/}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://blog.ioactive.com/2014/09/killing-rootkit.html}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 https://hashcat.net/events/p13/js-ocohaaaa.pdf}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://www.html5rocks.com/en/tutorials/security/content-security-policy/}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Platform for Architecture-Neutral Dynamic Analysis}
\par\plain {\f0\fs24\b0\i0 https://github.com/moyix/panda}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Identifying users of browsers:}
\par\plain {\f0\fs24\b0\i0 http://www.chromium.org/Home/chromium-security/client-identification-mechanisms}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://www.amanhardikar.com/mindmaps/Practice.html}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://grehack.org/en/}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 MSF/Meterpreter cmd reference}
\par\plain {\f0\fs24\b0\i0 http://hacking-class.blogspot.com/2011/08/metasploit-cheat-sheet-metasploit.html}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Meterpreter Documentation}
\par\plain {\f0\fs24\b0\i0 https://dev.metasploit.com/documents/meterpreter.pdf}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0  Xprivacy Android}
\par\plain {\f0\fs24\b0\i0 https://github.com/M66B/XPrivacy#description}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Tutorial series on Windows Firewall}
\par\plain {\f0\fs24\b0\i0 http://sourcedaddy.com/windows-7/managing-windows-firewall-using-windows-firewall-advanced-security.html}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Intro to content Security Polic}
\par\plain {\f0\fs24\b0\i0 www.html5rocks.com/en/tutorials/security/content-security-policy/}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Reading ASM}
\par\plain {\f0\fs24\b0\i0 http://cseweb.ucsd.edu/classes/sp11/cse141/pdf/02/S01_x86_64.key.pdf}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Intro to x86 calling conventions}
\par\plain {\f0\fs24\b0\i0 http://codearcana.com/posts/2013/05/21/a-brief-introduction-to-x86-calling-conventions.html}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Mem forenics cheat sheet}
\par\plain {\f0\fs24\b0\i0 http://forensicmethods.com/wp-content/uploads/2012/04/Memory-Forensics-Cheat-Sheet-v1.pdf}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Firefox private browsing forensics}
\par\plain {\f0\fs24\b0\i0 http://www.magnetforensics.com/forensic-implications-of-a-person-using-firefoxs-private-browsing/}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Simple crypto tools}
\par\plain {\f0\fs24\b0\i0 http://rumkin.com/tools/}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Unphp.net php decoder}
\par\plain {\f0\fs24\b0\i0 http://www.unphp.net/decode/}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 Virtual Ghost:}
\par\plain {\f0\fs24\b0\i0 Protecting Applications from Hostile Operating Systems}
\par\pard\plain \fi720\ltrch\loch {\f0\fs24\b0\i0 http://sva.cs.illinois.edu/pubs/VirtualGhost-ASPLOS-2014.pdf}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 A Practical Attack to De-Anonymize Social Network Users}
\par\plain {\f0\fs24\b0\i0 https://www.iseclab.org/papers/sonda-TR.pdf}
\par\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 malware}
\par\plain {\f0\fs24\b0\i0 http://zerowine.sourceforge.net/}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Malware analyis noob to ninja 60min pres slides}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://www.slideshare.net/grecsl/malware-analysis-101-n00b-to-ninja-in-60-minutes-at-cactuscon-on-april-4-2014}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 Honeypot Sstuff}
\par\plain {\f0\fs24\b0\i0 http://highaltitudehacks.com/2013/06/15/ghost-usb-honeypot-part-2-installing-and-running-the-honeypot/}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 Developer stuff:}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 http://project-imas.github.io/}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 https://viaforensics.com/resources/reports/best-practices-ios-android-secure-mobile-development/}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}