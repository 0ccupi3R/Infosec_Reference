{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Courier New;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
{\*\listtable
{\list\listtemplateid1\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f0\fs24\b0\i0\fi-360\li720\lin720}
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F;}{\levelnumbers;}\f0\fs24\b0\i0\fi-360\li1440\lin1440}{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f0\fs24\b0\i0\fi-360\li720\lin720}
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F;}{\levelnumbers;}\f0\fs24\b0\i0\fi-360\li1440\lin1440}{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24\b1\i0 What is Reverse Engineering? See the following link:}
\par\plain {\f0\fs24\b0\i0 http://www.program-transformation.org/Transform/DecompilationAndReverseEngineering}
\par\plain \f0\fs24\b1\i0
\par\plain {\f0\fs24\b1\i0 Guides & Tutorials}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 Wikis}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 Reference Guides}
\par\plain \f0\fs24\b1\i0
\par\plain \f0\fs24\b1\i0
\par\plain \f0\fs24\b1\i0
\par\plain \f0\fs24\b1\i0
\par\plain {\f0\fs24\b1\i0 Starting from Scratch?}
\par\plain {\f0\fs24\b0\i0 Check out: http://www.reddit.com/r/ReverseEngineering/comments/smf4u/reverser_wanting_to_develop_mathematically/}
\par\plain {\f0\fs24\b0\i0 And : }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 Windows Anti-Debugging Reference}
\par\plain {\f0\fs24\b0\i0 \tab From: http://www.symantec.com/connect/articles/windows-anti-debug-reference}
\par\pard\plain \li1440\fi-360\sa240\sb240\ltrch\loch \ls1\ilvl1{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F\tab }{\f0\fs24\b0\i0 This paper classifies and presents several anti-debugging techniques used on Windows NT-based operating systems. Anti-debugging techniques are ways for a program to detect if it runs under control of a debugger. They are used by commercial executable protectors, packers and malicious software, to prevent or slow-down the process of reverse-engineering. We'll suppose the program is analyzed under a ring3 debugger, such as OllyDbg on Windows platforms. The paper is aimed towards reverse-engineers and malware analysts. Note that we will talk purely about generic anti-debugging and anti-tracing techniques. Specific debugger detection, such as window or processes enumeration, registry scanning, etc. will not be addressed here.}
\par\pard\plain \sa240\sb240\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \fi720\ltrch\loch {\f0\fs24\b1\i0 Cryptoshark}
\par\plain {\f0\fs24\b0\i0 \tab From: https://github.com/frida/cryptoshark}
\par\pard\plain \li1440\fi-360\sa240\sb240\ltrch\loch \ls2\ilvl1{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9675\'3F\tab }{\f0\fs24\b0\i0 Interactive code tracer for reverse-engineering proprietary software }}