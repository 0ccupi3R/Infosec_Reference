{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Courier New;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
{\*\listtable
{\list\listtemplateid1\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f0\fs24\b0\i0\fi-360\li720\lin720}{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch \f0\fs24
\par\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs36\b1\i0 LFI Local File Inclusion Techniques (paper)}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs28\b0\i0 From: http://www.ush.it/2008/08/18/lfi2rce-local-file-inclusion-to-remote-code-execution-advanced-exploitation-proc-shortcuts/}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 This paper exposes the ability from the attacker standpoint to use /proc in order to exploit LFI (Local File Inclusion) vulnerabilities. While using /proc for such aim is well known this one is a specific technique that was not been previously published as far as we know. A tool to automatically exploit LFI using the shown approach is released accordingly. }
\par\plain {\f0\fs24\b0\i0 Update: a third (known) technique has been dissected here:}
\par\plain {\f0\fs24\b0\i0  http://www_ush_it/2008/07/09/local-file-inclusion-lfi-of-session-files-to-root-escalation/ }
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs36\b1\i0 Liffy (tool)}
\par\plain {\f0\fs28\b0\i0 From: https://github.com/rotlogix/liffy}
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24\b0\i0 Liffy is a Local File Inclusion Exploitation tool. }
\par\plain {\f0\fs24\b0\i0 Current features include: }
\par\pard\plain \li720\fi-360\sb240\ltrch\loch \ls1\ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 data:// for code execution}
\par\pard\plain \li720\fi-360\ltrch\loch \ls1\ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 expect:// for code execution}
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 input:// for code execution}
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 filter:// for arbitrary file reads}
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 /proc/self/environ for code execution in CGI mode}
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Apache access.log poisoning}
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Linux auth.log SSH poisoning}
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Direct payload delivery with no stager}
\par\plain \ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Support for absolute and relative paths }
\par\pard\plain \li720\fi-360\sa240\ltrch\loch \ls1\ilvl0{\listtext\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F\tab }{\f0\fs24\b0\i0 Support for cookies}
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24\b0\i0 ! I have had issues with access log poisoning on current versions of Apache. This not an issue with the payload delivery and or poisoning. This is more of an issue with the request after the poisoning to kick off your shell. This may require a browser refresh. !}}