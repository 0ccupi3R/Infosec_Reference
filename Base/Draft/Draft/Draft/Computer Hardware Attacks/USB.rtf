{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Courier New;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \fi720\ltrch\loch {\f0\fs24\b1\i0\ul\ulc0 USB Based Attacks}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b1\i0
\par\plain \f0\fs24\b1\i0
\par\plain {\f0\fs24\b1\i0 USB in a Nutshell}
\par\plain {\f0\fs24\b0\i0 Great explanation of the USB standard in depth}
\par\plain {\f0\fs24\b0\i0 http://www.beyondlogic.org/usbnutshell/usb1.shtml}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b1\i0 USB Device Drivers: A Stepping Stone into your Kernel}
\par\plain {\f0\fs24\b0\i0 https://www.youtube.com/watch?v=HQWFHskIY2Q}
\par\plain {\f0\fs24\b0\i0 Slides: www.jodeit.org/research/DeepSec2009_USB_Device_Drivers.pdf}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b1 Lowering the USB Fuzzing Barrier by Transparent Two-Way Emulation}
\par\plain {\f0\fs24 https://www.usenix.org/system/files/conference/woot14/woot14-vantonder.pdf}
\par\plain {\f0\fs24\b1 Abstract}
\par\plain {\f0\fs24 Increased focus on the Universal Serial Bus (USB) attack surface of devices has recently resulted in a number of new vulnerabilities. Much of this advance has been aided by the advent of hardware-based USB emulation techniques. However, existing tools and methods are far from ideal, requiring a significant investment of time, money, and effort. In this work, we present a USB testing framework that improves significantly over existing methods in providing a cost-effective and flexible way to read and modify USB communication. Amongst other benefits, the framework enables man-in-the-middle fuzz testing between a host and peripheral. We achieve this by performing two-way emulation using inexpensive bespoke USB testing hardware, thereby delivering capa-bilities of a USB analyzer at a tenth of the cost. Mutational fuzzing is applied during live communication between a host and peripheral, yielding new security-relevant bugs. Lastly, we comment on the potential of the framework to improve current exploitation techniques on the USB channel.}
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24
\par\plain \f0\fs24}