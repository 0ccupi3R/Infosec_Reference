Attacking Android Devices


List of Android Vulnerabilities
http://androidvulnerabilities.org/all

List of Android Exploits:
https://github.com/droidsec/droidsec.github.io/wiki/Vuln-Exploit-List


Books
Android hackers handbook


Security Analysis

Santoku Linux


Android Tamer
http://androidtamer.com/
Android Tamer is a one stop tool required to perform any kind of operations on Android devices / applications / network
VM

Android Device Testing Framework(DTF)
From: https://github.com/jakev/dtf/tree/v1.0.3

The Android Device Testing Framework ("dtf") is a data collection and analysis framework to help individuals answer the question: "Where are the vulnerabilities on this mobile device?" Dtf provides a modular approach and built-in APIs that allows testers to quickly create scripts to interact with their Android devices. The default download of dtf comes with multiple modules that allow testers to obtain information from their Android device, process this information into databases, and then start searching for vulnerabilities (all without requiring root privileges). These modules help you focus on changes made to AOSP components such as applications, frameworks, system services, as well as lower-level components such as binaries, libraries, and device drivers. In addition, you'll be able to analyze new functionality implemented by the OEMs and other parties to find vulnerabilities.

drozer
From their site: 
drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.
https://github.com/mwrlabs/drozer


APK Studio - Android Reverse Engineering
APK Studio is an IDE for decompiling/editing & then recompiling of android application binaries. Unlike initial release being Windows exclusive & also didn't support frameworks, this one is completely re-written using QT for cross-platform support. You can now have multiple frameworks installed & pick a particular one on a per project basis.
https://apkstudio.codeplex.com/

Application Analysis

Androguard
From their site:
Androguard is mainly a tool written in python to play with: 
Dex/Odex (Dalvik virtual machine) (.dex) (disassemble, decompilation), 
APK (Android application) (.apk), 
Android's binary xml (.xml), 
Android Resources (.arsc). 
Androguard is available for Linux/OSX/Windows (python powered).
https://code.google.com/p/androguard 

Droidmap	
From their site:
DroidBox is developed to offer dynamic analysis of Android applications. The following information is shown in the results, generated when analysis is ended: 
Hashes for the analyzed package 
Incoming/outgoing network data 
File read and write operations 
Started services and loaded classes through DexClassLoader 
Information leaks via the network, file and SMS 
Circumvented permissions 
Cryptography operations performed using Android API 
Listing broadcast receivers 
Sent SMS and phone calls 
Additionally, two images are generated visualizing the behavior of the package. One showing the temporal order of the operations and the other one being a treemap that can be used to check similarity between analyzed packages. 
		https://code.google.com/p/droidbox/
	

Links:
Security enhancements in android through its versions
	www.androidtamer.com


Attack Platforms

drozer
From their site: 
drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.
https://github.com/mwrlabs/drozer








Notes:


Defeating the bootloader
(HTC Devices)
-secuflag - security flag in radio firmware - modify radio

-gold card - specially formatted MicroSD card that can bypass carrier id check when flashing roms

-white card - special sim card used to bypass bootsec
     Emulate white card with hardware, combine with gold card to enter diagnostics and clear S-ON


White card not needd for cdma

Once S-OFF, can RAM load a custom boot iamge

Technique wipes most devices, but not all

Try it yourself: XTC clip


Forensics boot image

-Start early in the boot chain before the main system loads
-Provide ADB root shell over USB
-Do not mount anything, including cache to prevent any writes
-Devices with raw NAND flash and wear leveling implemented in software(YAFFS2) can be prevented from overwriting deleted data

Build boot image

upload adbd, busybox, nanddump to /sbin
default.prop (enable root shell, ro.secure=0)
init.rc (do not mount partitions, just start adb)

Flash and RAM load

Samsung
-Dump partitions using ODIN(maybe. probably not)
-Flash with ODIN or HEIMDALL
     heimdall flash --recovery recovery.bin
     heimdall flash --kernel zImage
HTC
-fastboot boot recovery.img (Ram loading)
-fastboot flash recovery recovery.img (flash partition)

Motorola
-sbf_flash image name.sbf (make sure it only contains recovery)

JTAG
-Flasher Box
     -ORT
     -RiffBox
     -Medusa Box
-Allows you to dump nandflash directly


Some devices have debug access via serial cables
-Use a Bus Pirate and MicroUSB breakout board
     -set bus pirate to 115200 bps, 8-N-1
     -Output type is normal, not open drain
     -Plug in device to MicroUSB and you will see it boot the Primitive Boot Loader followed by the Secondary Boot Loader
     -Hold down enter key on terminal while plugging in device to stop SBL from booting and get to the SBL prompt

Crack Pin/Password
-Salt - stored in /data/data/com.android.providers.settings/databases/settings.db

     -SELECT * FROM secure WHERE name = 'lockscreen.password_salt'

-Pin/Password
     -/data/system/password.key
     -Salted SHA1 of password concatenated with salted MD5

-Calculate the value of the salt in lowercase hex with no padding
$python -c 'print '%x' % salt_number_here'

-Copy the last 32 bytes of password.key(MD5 hash in hex), add a colon and then add the salt

-Crack with software such as oclHashcat

Android Encryption:
Implemented differently by manufacturers

-Encrypted Master key + salt stored in footer
-footer stored at end of partition or in a footer file on another partition or as a partition itself
-Image device and locate footer + encrypted user data partition

-Parse footer
-Locate Salt/master key
-Run a password guess through PBKDF2 with salt, use resulting key and IV to decrypt master key to decrypt first sector of encrypted image, if password is correct, plaintext revealed

-Cracking PINs takes seconds. Passwords are usually short or follow patterns due to being the same as the lock screen password

Evil maid attack
-Load app onto system partition, wait for user to boot phone, get remote access to decrypted user data
-Rootkits - compile kernel module
-Evil usb charger


Desperate Techniques
-Hard reset - some devices prior to 3.0 don't wipe data properly
-Chip-off - de-solder NAND chips
-Screen Smudges

More Techniques
-Custom update.zip - can you get one signed? stock needs sig
-Race condition on updates via SD cards
-Own a CA? MITM connetion, push app, update/exploit
-Entry via Google Play, if credentials cached on desktop
     -Screen Lock bypass - Doesn't work on 4.0 ->

Santoku Linux
-Free/open bootable linux distro
-project is collab with pros
-Mobile Forensics
-Mobile App Sec Testing
-Mobile Malware Analysis











