[Methodologies for Hacking Embedded Security Appliances](https://media.blackhat.com/us-13/US-13-Bathurst-Methodologies-for-Hacking-Embdded-Security-Appliances-Slides.pdf)

[American Fuzzy Lop AFL](http://lcamtuf.coredump.cx/afl/)
* American fuzzy lop is a security-oriented fuzzer that employs a novel type of compile-time instrumentation and genetic algorithms to automatically discover clean, interesting test cases that trigger new internal states in the targeted binary. This substantially improves the functional coverage for the fuzzed code. The compact synthesized corpora produced by the tool are also useful for seeding other, more labor- or resource-intensive testing regimes down the road. 
* It was made by lcamtuf. What more do you need?


[A Brief History of Exploit Techniques and Mitigations on Windows](http://www.hick.org/~mmiller/presentations/misc/exploitation_techniques_and_mitigations_on_windows.pdf)


[SANS InfoSec Policy Templates](https://www.sans.org/security-resources/policies/)

http://www.grouppolicy.biz/best-practices/

http://www.infoworld.com/article/2609578/security/the-10-windows-group-policy-settings-you-need-to-get-right.html?page=2



[Windows ISV Software Security Defenses](https://msdn.microsoft.com/en-us/library/bb430720.aspx)


http://waleedassar.blogspot.com/
https://github.com/isislab/Project-Ideas/wiki/Program-Analysis
https://github.com/isislab/Project-Ideas/wiki/Embedded-Device-Security
https://github.com/isislab/Project-Ideas/wiki/Application-Security


[Android Hooker](https://github.com/AndroidHooker/hooker)
* Hooker is an opensource project for dynamic analyses of Android applications. This project provides various tools and applications that can be use to automaticaly intercept and modify any API calls made by a targeted application.




[Exploit Mitigation Killchain](http://0xdabbad00.com/wp-content/uploads/2013/04/exploit_mitigation_kill_chain.pdf)


[ Inside the Android Play Service's magic OAuth flow ](http://sbktech.blogspot.com/2014/01/inside-android-play-services-magic.html)
* Owning google accounts on android devices


[Windows Firewall Hook Enumeration](https://www.nccgroup.com/en/blog/2015/01/windows-firewall-hook-enumeration/)
* We’re going to look in detail at Microsoft Windows Firewall Hook drivers from Windows 2000, XP and 2003. This functionality was leveraged by the Derusbi family of malicious code to implement port-knocking like functionality. We’re going to discuss the problem we faced, the required reverse engineering to understand how these hooks could be identified and finally how the enumeration tool was developed.

[The Many Maxims of Maximally Effective CTFs](http://captf.com/maxims.html)


[Exploit Mitigation Killchain](http://0xdabbad00.com/wp-content/uploads/2013/04/exploit_mitigation_kill_chain.pdf)

[Understanding DEP as a mitigation Technology](http://blogs.technet.com/b/srd/archive/2009/06/05/understanding-dep-as-a-mitigation-technology-part-1.aspx)


[Preventing the Exploitation of Structured Exception Handler (SEH) Overwrites with SEHOP](http://blogs.technet.com/b/srd/archive/2009/02/02/preventing-the-exploitation-of-seh-overwrites-with-sehop.aspx)


[Applied Appsec](http://www.thotcon.org/archive/0x2presos/10-AppliedApplicationSecurity.pdf)


[Theorem prover, symbolic execution and practical reverse-engineering](https://doar-e.github.io/presentations/securityday2015/SecDay-Lille-2015-Axel-0vercl0k-Souchet.html#/)



[FCC ID Lookup](http://transition.fcc.gov/oet/ea/fccid/)
* Lookup devices according to FCC ID


[NVbit : Accessing Bitlocker volumes from linux](http://www.nvlabs.in/index.php?/archives/1-NVbit-Accessing-Bitlocker-volumes-from-linux.html)


[Open Source Windows x86/x64 Debugger](http://x64dbg.com/)



[Introduction to ROP programming]http://codearcana.com/posts/2013/05/28/introduction-to-return-oriented-programming-rop.html)
[Gentle introduction to ROP programming](http://blog.zynamics.com/2010/03/12/a-gentle-introduction-to-return-oriented-programming/)


[Using Kernel Rootkits to conceal infected MBR](http://www.malwaretech.com/2015/01/using-kernel-rootkits-to-conceal.html)
* [Code](https://github.com/MalwareTech/FakeMBR/)

[Bypassing All the Things](https://www.exodusintel.com/files/Aaron_Portnoy-Bypassing_All_Of_The_Things.pdf)


[Windows 8 Security and ARM](http://2012.ruxconbreakpoint.com/assets/Uploads/bpx/alex-breakpoint2012.pdf)



https://archive.org/details/HardwareStuffForSoftwarePeople
http://dontstuffbeansupyournose.com/2011/08/25/hardware-hacking-for-software-people/



http://contextis.co.uk/documents/120/Glibc_Adventures-The_Forgotten_Chunks_1.pdf



[Statically Linked Library Detector](https://github.com/arvinddoraiswamy/slid)


Delta Copy](http://www.aboutmyip.com/AboutMyXApp/DeltaCopy.jsp)
* In technical terms, DeltaCopy is a "Windows Friendly" wrapper around the Rsync program, currently maintained by Wayne Davison. "rsync" is primarily designed for Unix/Linux/BSD systems. Although ports are available for Windows, they typically require downloading Cygwin libraries and manual configuration. 


Post exploitation trick - Phish users for creds on domains, from their own box:
https://enigma0x3.wordpress.com/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/


[CiscoRouter - tool](https://github.com/ajohnston9/ciscorouter)
* CiscoRouter is a tool for scanning Cisco-based routers over SSH. Rules can be created using accompanying CiscoRule application (see this repo) and stored in the "rules" directory.


[SpyStudio](http://www.nektra.com/products/spystudio-api-monitor/)
* SpyStudio shows and interprets calls, displaying the results in a structured way which is easy for any IT professional to understand. SpyStudio can show registry keys and files that an application uses, COM objects and Windows the application has created, and errors and exceptions.





[Windows Performance Toolkit Reference](http://msdn.microsoft.com/en-us/library/windows/hardware/hh162945.aspx)



[Seven Months’ Worth of Mistakes: A Longitudinal Study of Typosquatting Abuse](https://lirias.kuleuven.be/bitstream/123456789/471369/3/typos-final.pdf)
* Abstract: Typosquatting is the act of purposefully registering a domain name that is a mistype of a popular domain name. It is a concept that has been known and studied for over 15 years, yet still thoroughly practiced up until this day. While previous typosquatting studies have always taken a snapshot of the typosquatting landscape or base their longitudinal results only on domain registration data, we present the first content- based , longitudinal study of typosquatting. We collected data about the typosquatting domains of the 500 most popular sites of the Internet every day, for a period of seven months, and we use this data to establish whether previously discovered typosquatting trends still hold today, and to provide new results and insights in the typosquatting landscape. In particular we reveal that, even though 95% of the popular domains we investigated are actively targeted by typosquatters, only few trademark owners protect themselves against this practice by proactively registering their own typosquatting domains. We take advantage of the longitudinal aspect of our study to show, among other results, that typosquatting domains change hands from typosquatters to legitimate owners and vice versa, and that typosquatters vary their monetization strategy by hosting different types of pages over time. Our study also reveals that a large fraction of typosquatting domains can be traced back to a small group of typosquatting page hosters and that certain top-level domains are much more prone to typosquatting than others


[API Monitor](http://www.rohitab.com/apimonitor)
* API Monitor is a free software that lets you monitor and control API calls made by applications and services. Its a powerful tool for seeing how applications and services work or for tracking down problems that you have in your own applications.


[Hardware Hacking Videos](http://vimeo.com/album/1632121)

[Hardware Hacking for Software people](http://dontstuffbeansupyournose.com/2011/08/25/hardware-hacking-for-software-people/)

[A Tale of Two Kernels: Towards Ending Kernel Hardening Wars with Split Kernel](http://split.kernel.build/papers/ccs14.pdf)
* Abstract: Software security practitioners are often torn between choosing per- formance or security. In particular, OS kernels are sensitive to the smallest performance regressions. This makes it difficult to develop innovative kernel hardening mechanisms: they may inevitably incur some run-time performance overhead. Here, we propose building each kernel function with and without hardening, within a single split kernel . In particular, this allows trusted processes to be run under unmodified kernel code, while system calls of untrusted pro- cesses are directed to the hardened kernel code. We show such trusted processes run with no overhead when compared to an un- modified kernel. This allows deferring the decision of making use of hardening to the run-time. This means kernel distributors, system administrators and users can selectively enable hardening accord- ing to their needs: we give examples of such cases. Although this approach cannot be directly applied to arbitrary kernel hardening mechanisms, we show cases where it can. Finally, our implementa- tion in the Linux kernel requires few changes to the kernel sources and no application source changes. Thus, it is both maintainable and easy to use


[OpenRCE Anti Reverse Engineering Techniques Database](http://www.openrce.org/reference_library/anti_reversing)


[Scientific but Not Academical Overview of Malware Anti-Debugging, Anti-Disassembly and Anti- VM Technologies](http://research.dissect.pe/docs/blackhat2012-paper.pdf)
* This talk catalogs the common evasion techniques malware authors employ, applying over 50 different static detections, combined with a few dynamic ones for completeness. We validate our catalog by running these detections against a database of 4 million samples (the system is constantly running and the numbers will be updated for the presentation), enabling us to present an analysis on the real state of evasion techniques in use by malware today. The resulting data will help security companies and researchers around the world to focus their attention on making their tools and processes more efficient to rapidly avoid the malware authors' countermeasures. 



http://sniperforensicstoolkit.squarespace.com/malwaremanagementframework/

[List of low-level attacks/persistence techniques.  HIGHLY RECOMMENDED!](http://timeglider.com/timeline/5ca2daa6078caaf4)


[Glitching for n00bs - A journey to coax out chips' inner seccrets](http://media.ccc.de/browse/congress/2014/31c3_-_6499_-_en_-_saal_2_-_201412271715_-_glitching_for_n00bs_-_exide.html#video)
* Despite claims of its obsolescence, electrical glitching can be a viable attack vector against some ICs. This presentation chronicles a quest to learn what types of electrical transients can be introduced into an integrated circuit to cause a variety of circuit faults advantageous to an reverser. Several hardware platforms were constructed during the quest to aid in research, including old-skool & solderless breadboards, photo-etched & professional PCBs, FPGAs, and cheap & dirty homemade logic analyzers. The strengths and weaknesses of the various approaches will be discussed.


[O-Auth Security Cheat Sheet](http://www.oauthsecurity.com/)


[The Ultimate Anti-Debugging Reference(2011)](http://pferrie.host22.com/papers/antidebug.pdf)
* Good reference, though old.

[Windows Anti-Debug Reference](http://www.symantec.com/connect/articles/windows-anti-debug-reference)
* Good, but also old, Nov2010

[The Art of Unpacking - Paper](https://www.blackhat.com/presentations/bh-usa-07/Yason/Whitepaper/bh-usa-07-yason-WP.pdf)
* Abstract: The main purpose of this paper is to present anti-reversing techniques employed by 
executable packers/protectors and also discusses techniques and publicly available tools that 
can be used to bypass or disable this protections. This information will allow researchers, 
especially, malcode analysts to identify these techniques when utilized by packed malicious 
code, and then be able decide the next move when these anti-reversing techniques impede 
successful analysis. As a secondary purpose, the information presented can also be used by 
researchers that are planning to add some level of protection in their software by slowing 
down reversers from analyzing their protected code, but of course, nothing will stop a skilled, 
informed, and determined reverser


Harden windows IP Stack
https://www.reddit.com/r/netsec/comments/2sg80a/how_to_harden_windowsiis_ssltls_configuration/


Obfuscating python
https://reverseengineering.stackexchange.com/questions/1943/what-are-the-techniques-and-tools-to-obfuscate-python-programs


Rdis
https://github.com/endeav0r/rdis



  [RANCID - Really Awesome New Cisco confIg Differ](http://www.shrubbery.net/rancid/)
* RANCID monitors a router's (or more generally a device's) configuration, including software and hardware (cards, serial numbers, etc) and uses CVS (Concurrent Version System) or Subversion to maintain history of changes.

* RANCID does this by the very simple process summarized as: login to each device in the router table (router.db), run various commands to get the information that will be saved, cook the output; re-format, remove oscillating or incrementing data, email any differences (sample) from the previous collection to a mail list, and finally commit those changes to the revision control system





http://www.persistencelabs.com/research/




https://github.com/Yelp/osxcollector

https://github.com/jduck/asus-cmd


https://www.npmjs.com/package/github-firehose


http://blog.scalyr.com/2013/10/exploring-the-github-firehose/










http://rewtdance.blogspot.com/2012/06/exploiting-windows-2008-group-policy.html




[Second section good resource for hardening windows](http://labs.bitdefender.com/2014/11/do-your-bit-to-limit-cryptowall/)








https://github.com/gtfy/MozillaRecovery



[BitBlaze](http://bitblaze.cs.berkeley.edu/)
* The BitBlaze project aims to design and develop a powerful binary analysis platform and employ the platform in order to (1) analyze and develop novel COTS protection and diagnostic mechanisms and (2) analyze, understand, and develop defenses against malicious code. The BitBlaze project also strives to open new application areas of binary analysis, which provides sound and effective solutions to applications beyond software security and malicious code defense, such as protocol reverse engineering and fingerprint generation. 



https://en.wikibooks.org/wiki/Metasploit/Tips_and_Tricks


[Zed Attack Proxy (ZAP) Community Scripts](https://github.com/zaproxy/community-scripts)
* A collection of ZAP scripts provided by the community - pull requests very welcome! 





http://www.myopenrouter.com/article/10917/Port-Mirroring-Span-Port-Monitor-Port-with-iptables-on-NETGEAR-WGR614L/



http://www.kahusecurity.com/2014/javascript-deobfuscation-tools-redux/

https://www.f-secure.com/weblog/archives/00002774.html


https://cryptoservices.github.io/fde/2014/12/08/code-execution-in-spite-of-bitlocker.html

http://census-labs.com/news/2014/11/27/project-heapbleed/

http://netdude.sourceforge.net/

Cull the interesting papers
http://www.covert.io/

http://security.coverity.com/blog/2014/Nov/understanding-python-bytecode.html



https://sourceware.org/binutils/docs/binutils/readelf.html



http://carnal0wnage.attackresearch.com/2013/10/dumping-domains-worth-of-passwords-with.html
http://obscuresecurity.blogspot.com/2014/05/dirty-powershell-webserver.html
http://www.harmj0y.net/blog/powershell/dumping-a-domains-worth-of-passwords-with-mimikatz-pt-2/




CVE-2014-7911: Android <5.0 Privilege Escalation using ObjectInputStream 

http://seclists.org/fulldisclosure/2014/Nov/51 




http://www.android-x86.org/
Android-x86 Project - Run Android on Your PC 
This is a project to port Android open source project to x86 platform, formerly known as "patch hosting for android x86 support". The original plan is to host different patches for android x86 support from open source community. A few months after we created the project, we found out that we could do much more than just hosting patches. So we decide to create our code base to provide support on different x86 platforms, and set up a git server to host it.


Dare is a project which aims at enabling Android application analysis. The Dare tool retargets Android applications in .dex or .apk format to traditional .class files. These .class files can then be processed by existing Java tools, including decompilers. Thus, Android applications can be analyzed using a vast range of techniques developed for traditional Java applications. 
http://siis.cse.psu.edu/

http://c7zero.info/



http://www.bleepingcomputer.com/tutorials/windows-program-automatic-startup-locations/




Logging for AD in sysadmin section
Like proccesses created




http://www.malwaretech.com/2014/04/coding-malware-for-fun-and-not-for.html



Look into
http://cybergibbons.com/uncategorized/an-intriguing-mix-of-micros/

Lookat http://www.cl.cam.ac.uk/~sps32/PartII_030214.pdf

Check under research section
http://www.cl.cam.ac.uk/~sps32/


http://moonbaseotago.com/onerng/theory.html


Access control best practices
https://srlabs.de/acs/

Go through
https://santoku-linux.com/howtos

http://digirati82.com/2013/06/03/using-splunk-to-watch-for-new-binaries/

http://www.malwaretech.com/2013/08/powerloader-injection-something-truly.html

Compare resources against what power-view can grab
Compare against sysmon service for scaling, setting it as service with scripting
http://www.codeproject.com/Articles/36907/How-to-develop-your-own-Boot-Loader

http://www.malwaretech.com/2013/09/win64vabushky-great-code-heist.html 

http://eshunrd.blogspot.com/2011/09/linux-kernel-26362-econet-privilege.html

Shellshock bug writeup by lcamtuf
http://lcamtuf.blogspot.com/2014/10/bash-bug-how-we-finally-cracked.html
https://github.com/Veil-Framework/Veil-PowerView



https://addons.mozilla.org/en-US/firefox/addon/ssleuth/

http://www.petges.lu/home/

http://0xdabbad00.com/2013/09/02/file-scanner-web-app-part-1-of-5-stand-up-and-webserver/

http://grehack.org/en/