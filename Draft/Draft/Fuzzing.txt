Fuzzing

[Quick explanation of fuzzing and various fuzzers](http://whoisjoe.info/?p=16)

Tools

[Grinder - Fuzzer](https://github.com/stephenfewer/grinder)
* Grinder is a system to automate the fuzzing of web browsers and the management of a large number of crashes. Grinder Nodes provide an automated way to fuzz a browser, and generate useful crash information (such as call stacks with symbol information as well as logging information which can be used to generate reproducible test cases at a later stage). A Grinder Server provides a central location to collate crashes and, through a web interface, allows multiple users to login and manage all the crashes being generated by all of the Grinder Nodes.


[CERT’s Failure Observation Engine (FOE)](https://www.cert.org/vulnerability-analysis/tools/foe.cfm)
* The CERT Failure Observation Engine (FOE) is a software testing tool that finds defects in applications that run on the Windows platform. FOE performs mutational fuzzing on software that consumes file input. (Mutational fuzzing is the act of taking well-formed input data and corrupting it in various ways looking for cases that cause crashes.) The FOE automatically collects test cases that cause software to crash in unique ways, as well as debugging information associated with the crashes. The goal of FOE is to minimize the effort required for software vendors and security researchers to efficiently discover and analyze security vulnerabilities found via fuzzing.

[Radamsa](https://code.google.com/p/ouspg/wiki/Radamsa)
* Radamsa is a test case generator for robustness testing, aka a fuzzer. It can be used to test how well a program can stand malformed and potentially malicious inputs. It operates based on given sample inputs and thus requires minimal effort to set up. The main selling points of radamsa are that it is easy to use, contains several old and new fuzzing algorithms, is easy to script from command line and has already been used to find a slew of bugs in programs that actually matter. 






Methodologies





Writeups 
[Faster Fuzzing with Python](https://labs.mwrinfosecurity.com/blog/2014/12/10/faster-fuzzing-with-python/)
[Walkthrough of setting up CERT’s FOE fuzzer and fuzzing irfanview](http://www.singlehop.com/blog/lets-fuzz-irfanview/)


Books/Papers

[*THE* Book on fuzzing](http://fuzzing.org/)




Misc

[Good slides on fuzzing](https://courses.cs.washington.edu/courses/cse484/14au/slides/Section8.pdf)

[USB Fuzzing Basics from fuzzing to Bug Reporting](http://blog.quarkslab.com/usb-fuzzing-basics-from-fuzzing-to-bug-reporting.html)

Peach Fuzzer
Peach Documentation
http://old.peachfuzzer.com/Introduction.html

[Creating Custom Peach Fuzzer Publishers](http://blog.opensecurityresearch.com/2014/01/creating-custom-peach-fuzzer-publishers.html)
Creating Custom Peach Fuzzer Publishers
Link: http://blog.opensecurityresearch.com/2014/01/creating-custom-peach-fuzzer-publishers.html
Code: https://github.com/OpenSecurityResearch/CustomPeachPublisher


Fuzzing with Peach tutorial
Part 1: http://www.flinkd.org/2011/07/fuzzing-with-peach-part-1/
Part 2: http://www.flinkd.org/2011/11/fuzzing-with-peach-part-2-fixups-2/

[Fuzzing Vulnserver with Peach 3](http://rockfishsec.blogspot.com/2014/01/fuzzing-vulnserver-with-peach-3.html)
