{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Courier New;}{\f1\fmodern\fcharset0\fprq1 Courier New;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch \f0\fs24
\par\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24\b1\i0 Tool}{\f0\fs24\b0\i0 \line portfwd\line }
\par\plain {\f0\fs24\b1\i0 Basic Syntax}{\f0\fs24\b0\i0  }
\par\pard\plain \ltrch\loch \f0\fs24\b0\i0


\trowd\trgaph0 \trautofit1\lastrow \trbrdrt\brdrnil \trbrdrr\brdrnil \trbrdrb\brdrnil \trbrdrl\brdrnil 
\clvertalt \clshdrawnil\clbrdrt\brdrnil \clbrdrr\brdrnil \clbrdrb\brdrnil \clbrdrl\brdrnil \cellx8640

\pard\plain \intbl\itap1\keep\sa240\sb240\ql{\f1\fs24\b0\i0 portfwd add -l }{\f1\fs24\b1\i0 <local}{\f1\fs24\b0\i0  port on the attacking machine }{\f1\fs24\b1\i0 (}{\f1\fs24\b0\i0 yours}{\f1\fs24\b1\i0 )>}{\f1\fs24\b0\i0  -p }{\f1\fs24\b1\i0 <}{\f1\fs24\b0\i0 victim port we want to access}{\f1\fs24\b1\i0 >}{\f1\fs24\b0\i0  -r }{\f1\fs24\b1\i0 <}{\f1\fs24\b0\i0 victim IP address}{\f1\fs24\b1\i0 >}\cell{
\trowd\trgaph0 \trautofit1\lastrow \trbrdrt\brdrnil \trbrdrr\brdrnil \trbrdrb\brdrnil \trbrdrl\brdrnil 
\clvertalt \clshdrawnil\clbrdrt\brdrnil \clbrdrr\brdrnil \clbrdrb\brdrnil \clbrdrl\brdrnil \cellx8640
\row}\pard
\pard\plain \sa240\sb240\ltrch\loch {\f0\fs24\b1\i0 Breakdown\line }{\f0\fs24\b0\i0 add : this is telling portfwd to add the following path to it\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s routing table. You can also delete portfwds, etc.\line -l : local port on the attacking machine. This is essentially what \u8220\'93becomes\u8221\'94 the target port we are trying to access.\line -p : victim port we are trying to access. In the above hypothetical that would be port 25.\line -r : the victim IP address, also in Metasploit terminology this would be the RHOST value.}
\par\plain {\f0\fs24\b1\i0 Example \endash  Given the Victims IP is 192.168.1.99}{\f0\fs24\b0\i0  }
\par\pard\plain \ltrch\loch \f0\fs24\b0\i0


\trowd\trgaph0 \trautofit1\lastrow \trbrdrt\brdrnil \trbrdrr\brdrnil \trbrdrb\brdrnil \trbrdrl\brdrnil 
\clvertalt \clshdrawnil\clbrdrt\brdrnil \clbrdrr\brdrnil \clbrdrb\brdrnil \clbrdrl\brdrnil \cellx8640

\pard\plain \intbl\itap1\keep\sb240\ql{\f1\fs24\b0\i0 portfwd add -l 1234 -p 25 -r 192.168.1.99}
\par\pard\plain \intbl\itap1\keep\sa240\ql{\f1\fs24\b0\i0 .}{\f1\fs24\b1\i0 /}{\f1\fs24\b0\i0 super_remote_mail_exploit --target: 127.0.0.1:1234  # This would actually attack the victim's port 25.}\cell{
\trowd\trgaph0 \trautofit1\lastrow \trbrdrt\brdrnil \trbrdrr\brdrnil \trbrdrb\brdrnil \trbrdrl\brdrnil 
\clvertalt \clshdrawnil\clbrdrt\brdrnil \clbrdrr\brdrnil \clbrdrb\brdrnil \clbrdrl\brdrnil \cellx8640
\row}\pard
\pard\plain \fi720\ltrch\loch \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Metasploit Post-Exploitation Command List}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Table of Contents\loch\af0\hich\af0\dbch\af0\uc1\u61439\'3F}
\par\plain {\f0\fs24\b0\i0 Windows Native Meterpreter}
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain {\f0\fs24\b0\i0 Persistance}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain {\f0\fs24\b0\i0 Java Meterpreter}
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain {\f0\fs24\b0\i0 Persistance}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain {\f0\fs24\b0\i0 PHP Meterpreter on Linux}
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain {\f0\fs24\b0\i0 Persistance}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain {\f0\fs24\b0\i0 PHP Meterpreter on Windows}
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain {\f0\fs24\b0\i0 Persistance}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain {\f0\fs24\b0\i0 Linux Meterpreter}
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain {\f0\fs24\b0\i0 Persistance}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain {\f0\fs24\b0\i0 Information Gathering}
\par\plain {\f0\fs24\b0\i0 Meterpreter Scripts}
\par\plain {\f0\fs24\b0\i0 Post Modules}
\par\plain {\f0\fs24\b0\i0 TAKEN FROM WINDOWS LISTS, NEEDS TO BE FORMATTED}
\par\plain {\f0\fs24\b0\i0 Useful Meterpreter Post Modules}
\par\plain {\f0\fs24\b0\i0 Useful Multi-Step Techniques\loch\af0\hich\af0\dbch\af0\uc1\u61438\'3F}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 \'0C}
\par\plain {\f0\fs24\b0\i0 Presence, Persistence, and Pivoting}
\par\plain {\f0\fs24\b0\i0 Everyone does things differently, and explaining what goes through an attackers head when they get a shell is virtually impossible and even more so to generalize into a methodology, but I\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92ve tried to do that with the \u8220\'933 \u8216\'91P\u8217\'92s of Post Exploitation\u8221\'94 and they are in a certain order for a reason but certainly up to circumstance to what order is best.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 The first P is Presence. It is first because the attacker needs to get a sense of what he/she has got before they move on. It plays a crucial part in the other two \loch\af0\hich\af0\dbch\af0\uc1\u8216\'91P\u8217\'92s, making them much stealthier or easier. Many times I\u8217\'92ve seen people jump from box to box and totally miss that what they were looking for was on the first one. So \u8220\'93Presence\u8221\'94 is all about discovering what you (the attacker) has already. This has many levels and the order of which the attacker checks them and how is arbitrary as well, but they should have at the very least a check list of categories to check on. Here are some to think about:}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 File System:}
\par\plain {\f0\fs24\b0\i0 Knowing \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93where\u8221\'94 to look is tough but in each section below we\u8217\'92ll go into known good places to check and ways to search for files and folders with interesting names and extensions}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 OS}
\par\plain {\f0\fs24\b0\i0 Proxy settings, Group Policy settings, login scripts, MOTD, User lists (net user and /etc/passwd). Knowing how the system and attacker has compromised is a crucial piece to understanding how it communicates and works as a piece to the network.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 RAM}
\par\plain {\f0\fs24\b0\i0 Mostly known for pulling hashes and credentials out of it, there are a lot of other interesting things that reside solely in memory}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Media}
\par\plain {\f0\fs24\b0\i0 CDs, DVDs, NFS mounts, SMB mounts, USB sticks. These are often bypassed and forgotten during an attack but can hold the keys to the kingdom}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Network}
\par\plain {\f0\fs24\b0\i0 Routes, ARP entries, netstat are pretty common to check, but broadcast messages, listeners, and IPv6 are less so.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Permissions and Credentials}
\par\plain {\f0\fs24\b0\i0 This is the obvious one but there is usually a mountain of data as even TinyCore linux has hundreds of files, each with their own permissions. This category extends past the borders of the others but important to single out as a separate step.}
\par\plain {\f0\fs24\b0\i0 Persistence is achieved at varying levels depending on what the attacker is trying to survive and what the attacker is willing to give up on the stealth side. Staying in memory pretty much kills the attackers chance of surviving a reboot for instance. Tactics to survive a rebuild or revert are also very different. Persistence can also come in the form of simple authentication, if the attacker has a password and it nets him/her code execution or access to the data they are after then that\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s all they need. Special focus should be applied to the information gathering section of penetration tests or red team engagements in regards to places that require authentication. }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Pivoting simple means extending the attackers current access, and can mean anything from connecting to a remote NFS mount to the attacker PSEXEC-ing their Meterpreter payload onto another box that they have administrative access to. This is the last stage because concentration on the previous two is hard to do in the adrenaline high of initial access.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Honorable Mention (the mysterious 4th \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93P\u8221\'94) Privilege Escalation is not part of the Trio (because  then there would be 4 and I wouldn\u8217\'92t know what to call it) while it\u8217\'92s a regular step performed by attackers, it\u8217\'92s something that usually gets too much emphasis. _You do not always need Domain Admin access to access the \u8220\'93crown jewels\u8221\'94_ .These highly privileged accounts should be assumed to be extremely monitored and coveted. (adding a new user to the Domain Admins group is like lighting your hair on fire and running in the front door of the targets office building screaming \u8220\'93h4x!!\u8221\'94)}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Windows Native Meterpreter}
\par\plain {\f0\fs24\b0\i0 Payloads available:}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/bind_ipv6_tcp}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/bind_nonx_tcp}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/bind_tcp}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/find_tag}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_http}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_https}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_ipv6_http}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_ipv6_https}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_ipv6_tcp}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_nonx_tcp}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_ord_tcp}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_tcp}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_tcp_allports}
\par\plain {\f0\fs24\b0\i0 windows/meterpreter/reverse_tcp_dns}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/bind_ipv6_tcp}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/bind_nonx_tcp}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/bind_tcp}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/find_tag}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/reverse_ipv6_tcp}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/reverse_nonx_tcp}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/reverse_ord_tcp}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/reverse_tcp}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/reverse_tcp_allports}
\par\plain {\f0\fs24\b0\i0 windows/patchupmeterpreter/reverse_tcp_dns}
\par\plain {\f0\fs24\b0\i0 windows/x64/meterpreter/bind_tcp}
\par\plain {\f0\fs24\b0\i0 windows/x64/meterpreter/reverse_tcp}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Windows Meterpreter is the most developed and well known payload set inside of Metasploit, while the other sections will try to push the limits of the functionality of the different Meterpreter types, this section will focus more on the \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93best\u8221\'94 way of using it. Since this is a publicly editable page that will mean that \u8220\'93best\u8221\'94 will develop over time, but expect a fight if you put in something I feel is stupid, will get an attacker caught, or hard/impossible to clean up. [--mubix] }
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Persistence}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Java Meterpreter}
\par\plain {\f0\fs24\b0\i0 Payloads available:}
\par\plain {\f0\fs24\b0\i0 java/meterpreter/bind_tcp}
\par\plain {\f0\fs24\b0\i0 java/meterpreter/reverse_http}
\par\plain {\f0\fs24\b0\i0 java/meterpreter/reverse_https}
\par\plain {\f0\fs24\b0\i0 java/meterpreter/reverse_tcp}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain {\f0\fs24\b0\i0 Persistence}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 \'0C}
\par\plain {\f0\fs24\b0\i0 PHP Meterpreter on Linux}
\par\plain {\f0\fs24\b0\i0 Payloads available:}
\par\plain {\f0\fs24\b0\i0 php/meterpreter/bind_tcp}
\par\plain {\f0\fs24\b0\i0 php/meterpreter/reverse_tcp}
\par\plain {\f0\fs24\b0\i0 php/meterpreter_reverse_tcp}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain {\f0\fs24\b0\i0 Persistence}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 \'0C}
\par\plain {\f0\fs24\b0\i0 PHP Meterpreter on Windows}
\par\plain {\f0\fs24\b0\i0 Payloads available:}
\par\plain {\f0\fs24\b0\i0 php/meterpreter/bind_tcp}
\par\plain {\f0\fs24\b0\i0 php/meterpreter/reverse_tcp}
\par\plain {\f0\fs24\b0\i0 php/meterpreter_reverse_tcp}
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain {\f0\fs24\b0\i0 Persistence}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Linux Meterpreter}
\par\plain {\f0\fs24\b0\i0 Payloads available:}
\par\plain {\f0\fs24\b0\i0 linux/x86/meterpreter/bind_ipv6_tcp}
\par\plain {\f0\fs24\b0\i0 linux/x86/meterpreter/bind_tcp}
\par\plain {\f0\fs24\b0\i0 linux/x86/meterpreter/find_tag}
\par\plain {\f0\fs24\b0\i0 linux/x86/meterpreter/reverse_ipv6_tcp}
\par\plain {\f0\fs24\b0\i0 linux/x86/meterpreter/reverse_tcp}
\par\plain {\f0\fs24\b0\i0 Presence}
\par\plain {\f0\fs24\b0\i0 Persistence}
\par\plain {\f0\fs24\b0\i0 Pivoting}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Compatibility is listed for each command, here is the key for the abbreviations:}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Windows Meterpreter}
\par\plain {\f0\fs24\b0\i0 win}
\par\plain {\f0\fs24\b0\i0 Java Meterpreter}
\par\plain {\f0\fs24\b0\i0 java}
\par\plain {\f0\fs24\b0\i0 PHP Meterpreter}
\par\plain {\f0\fs24\b0\i0 php}
\par\plain {\f0\fs24\b0\i0 Linux Meterpreter}
\par\plain {\f0\fs24\b0\i0 linux}
\par\plain {\f0\fs24\b0\i0 Command Shell}
\par\plain {\f0\fs24\b0\i0 shell}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Metasploit 4.2 documentation:}
\par\plain {\f0\fs24\b0\i0 https://community.rapid7.com/docs/DOC-1751}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Information Gathering}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Command}
\par\plain {\f0\fs24\b0\i0 Compatibility}
\par\plain {\f0\fs24\b0\i0 Description and Reason}
\par\plain {\f0\fs24\b0\i0 getuid}
\par\plain {\f0\fs24\b0\i0 win,java,php}
\par\plain {\f0\fs24\b0\i0 Lists current user}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Meterpreter Scripts }
\par\plain {\f0\fs24\b0\i0 (deprecated but still useful)}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Post Modules}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 TAKEN FROM WINDOWS LISTS, NEEDS TO BE FORMATTED }
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Meterpreter Commands}
\par\plain {\f0\fs24\b0\i0 ps}
\par\plain {\f0\fs24\b0\i0 (show running processes and their associated users/id numbers)}
\par\plain {\f0\fs24\b0\i0 getuid}
\par\plain {\f0\fs24\b0\i0 Get user ID}
\par\plain {\f0\fs24\b0\i0 getpid}
\par\plain {\f0\fs24\b0\i0 Gets the process ID}
\par\plain {\f0\fs24\b0\i0 getprivs}
\par\plain {\f0\fs24\b0\i0 (shows current privileges)}
\par\plain {\f0\fs24\b0\i0 getsystem}
\par\plain {\f0\fs24\b0\i0 Attempts to get SYSTEM using 4 methods, the last being a local exploit called Kitrap0d. This can sometimes be caught by host based IDS systems and even in rare occasions blue screen the machine.}
\par\plain {\f0\fs24\b0\i0 getsystem - (place holder for targetd getsys)}
\par\plain {\f0\fs24\b0\i0 If anyone wants to fill this in before I can please do}
\par\plain {\f0\fs24\b0\i0 sysinfo}
\par\plain {\f0\fs24\b0\i0 Get system information}
\par\plain {\f0\fs24\b0\i0 timestomp}
\par\plain {\f0\fs24\b0\i0 Remove/screw up timestamps if you are good enough this messes up audit tools}
\par\plain {\f0\fs24\b0\i0 clearev}
\par\plain {\f0\fs24\b0\i0 Clears event logs}
\par\plain {\f0\fs24\b0\i0 hashdump}
\par\plain {\f0\fs24\b0\i0 dump SAM file hashes for pass the hash or cracking}
\par\plain {\f0\fs24\b0\i0 migrate [pid]}
\par\plain {\f0\fs24\b0\i0 Move from exploited process into another process}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Useful Meterpreter Scripts}
\par\plain {\f0\fs24\b0\i0 killav.rb (Meterpreter script that kills all Antivirus processes.)}
\par\plain {\f0\fs24\b0\i0 winenum.rb (Retrieves all kinds of information about the system including environment variables,  interfanetworkces, print_line "routing, user accounts, and much more.)}
\par\plain {\f0\fs24\b0\i0 scraper.rb (harvest system info including network shares, registry hives and password hashes.)}
\par\plain {\f0\fs24\b0\i0 persistence.rb (Meterpreter Script for creating a persistent backdoor on a target host.)}
\par\plain {\f0\fs24\b0\i0 keylogrecorder.rb (This script will start the Meterpreter Keylogger and save all keys.)}
\par\plain {\f0\fs24\b0\i0 getgui.rb (Windows Remote Desktop Enabler Meterpreter Script.)}
\par\plain {\f0\fs24\b0\i0 For a complete list please see: http://metasploit.com/svn/framework3/trunk/scripts/meterpreter/}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Useful Meterpreter Post Modules}
\par\plain {\f0\fs24\b0\i0 post/windows/gather/smart_hashdump}
\par\plain {\f0\fs24\b0\i0 post/windows/gather/credentials/vnc}
\par\plain {\f0\fs24\b0\i0 post/windows/escalate/bypassuac (mixed results)}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Useful Multi-Step Techniques}
\par\plain {\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93Pass The Hash\u8221\'94 attack (Gain access to other computers with stolen hashes, no cracking involved)}
\par\plain {\f0\fs24\b0\i0 Token impersonation via incognito}
\par\plain {\f0\fs24\b0\i0 use incognito}
\par\plain {\f0\fs24\b0\i0 list_tokens -u}
\par\plain {\f0\fs24\b0\i0         impersonate_token}
\par\plain {\f0\fs24\b0\i0 ->http://www.offensive-security.com/metasploit-unleashed/Fun_With_Incognito}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 # Convert Metasploit\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s MSCACHE output to Hashcat version (performed in ~/.msf4/loot/):}
\par\plain {\f0\fs24\b0\i0 cat *mscache* | awk -F '"' '\{print $4":"$2\}'}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}